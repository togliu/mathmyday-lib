<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="finnmath"><sessioninfo id="fv-az154-100-36ca7c07" start="1626104952621" dump="1626104958834"/><package name="io/github/ltennstedt/finnmath/extension"><class name="io/github/ltennstedt/finnmath/extension/FloatsKt" sourcefilename="Floats.kt"><method name="toComplex" desc="(F)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="27"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(F)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="34"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/extension/BigDecimalsKt" sourcefilename="BigDecimals.kt"><method name="sqrt" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="31"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sqrt$default" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;ILjava/lang/Object;)Ljava/math/BigDecimal;" line="31"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sin" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="43"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sin$default" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;ILjava/lang/Object;)Ljava/math/BigDecimal;" line="43"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cos" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="55"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cos$default" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;ILjava/lang/Object;)Ljava/math/BigDecimal;" line="55"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="acos" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="67"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="acos$default" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;ILjava/lang/Object;)Ljava/math/BigDecimal;" line="67"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(Ljava/math/BigDecimal;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="77"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="127" covered="0"/><counter type="LINE" missed="17" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/extension/DoublesKt" sourcefilename="Doubles.kt"><method name="toComplex" desc="(D)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="27"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(D)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="34"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/extension/TablesKt" sourcefilename="Tables.kt"><method name="isNotEmpty" desc="(Lcom/google/common/collect/Table;)Z" line="26"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/extension/IntsKt" sourcefilename="Ints.kt"><method name="isEven" desc="(I)Z" line="33"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isOdd" desc="(I)Z" line="40"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPowerOfTwo" desc="(I)Z" line="47"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="gcd" desc="(II)I" line="54"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toFraction" desc="(I)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="61"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigFraction" desc="(I)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="68"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toGaussian" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="75"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplex" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="82"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigGaussian" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="89"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="96"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="7" covered="3"/><counter type="COMPLEXITY" missed="7" covered="5"/><counter type="METHOD" missed="7" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/extension/LongsKt" sourcefilename="Longs.kt"><method name="isEven" desc="(J)Z" line="33"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isOdd" desc="(J)Z" line="40"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPowerOfTwo" desc="(J)Z" line="47"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="gcd" desc="(JJ)J" line="54"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toFraction" desc="(J)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="61"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigFraction" desc="(J)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="68"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toGaussian" desc="(J)Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="75"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplex" desc="(J)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="82"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigGaussian" desc="(J)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="89"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(J)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="96"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="48" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="6" covered="4"/><counter type="COMPLEXITY" missed="6" covered="6"/><counter type="METHOD" missed="6" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/extension/BigIntegersKt" sourcefilename="BigIntegers.kt"><method name="isPowerOfTwo" desc="(Ljava/math/BigInteger;)Z" line="33"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="43"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sqrt$default" desc="(Ljava/math/BigInteger;Ljava/math/MathContext;ILjava/lang/Object;)Ljava/math/BigDecimal;" line="42"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sqrt" desc="(Ljava/math/BigInteger;Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="52"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sin" desc="(Ljava/math/BigInteger;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="62"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sin$default" desc="(Ljava/math/BigInteger;Ljava/math/MathContext;ILjava/lang/Object;)Ljava/math/BigDecimal;" line="61"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="sin" desc="(Ljava/math/BigInteger;Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="71"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cos" desc="(Ljava/math/BigInteger;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="81"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cos$default" desc="(Ljava/math/BigInteger;Ljava/math/MathContext;ILjava/lang/Object;)Ljava/math/BigDecimal;" line="80"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="cos" desc="(Ljava/math/BigInteger;Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="90"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="acos" desc="(Ljava/math/BigInteger;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="100"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="acos$default" desc="(Ljava/math/BigInteger;Ljava/math/MathContext;ILjava/lang/Object;)Ljava/math/BigDecimal;" line="99"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="acos" desc="(Ljava/math/BigInteger;Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="109"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigFraction" desc="(Ljava/math/BigInteger;)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="116"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBigGaussian" desc="(Ljava/math/BigInteger;)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="123"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(Ljava/math/BigInteger;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="130"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(Ljava/math/BigInteger;Lio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="138"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="268" covered="20"/><counter type="LINE" missed="15" covered="2"/><counter type="COMPLEXITY" missed="15" covered="2"/><counter type="METHOD" missed="15" covered="2"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/extension/ClosedRangesKt" sourcefilename="ClosedRanges.kt"><method name="isNotEmpty" desc="(Lkotlin/ranges/ClosedRange;)Z" line="24"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="ClosedRanges.kt"><line nr="24" mi="0" ci="7" mb="0" cb="2"/><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Longs.kt"><line nr="33" mi="0" ci="10" mb="0" cb="2"/><line nr="40" mi="0" ci="10" mb="0" cb="2"/><line nr="47" mi="0" ci="3" mb="0" cb="0"/><line nr="54" mi="0" ci="14" mb="0" cb="0"/><line nr="61" mi="8" ci="0" mb="0" cb="0"/><line nr="68" mi="8" ci="0" mb="0" cb="0"/><line nr="75" mi="8" ci="0" mb="0" cb="0"/><line nr="82" mi="8" ci="0" mb="0" cb="0"/><line nr="89" mi="8" ci="0" mb="0" cb="0"/><line nr="96" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="48" covered="37"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="6" covered="4"/><counter type="COMPLEXITY" missed="6" covered="6"/><counter type="METHOD" missed="6" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Tables.kt"><line nr="26" mi="7" ci="0" mb="2" cb="0"/><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Doubles.kt"><line nr="27" mi="8" ci="0" mb="0" cb="0"/><line nr="34" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="BigIntegers.kt"><line nr="33" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="14" ci="0" mb="0" cb="0"/><line nr="43" mi="11" ci="0" mb="0" cb="0"/><line nr="52" mi="20" ci="0" mb="0" cb="0"/><line nr="61" mi="14" ci="0" mb="0" cb="0"/><line nr="62" mi="11" ci="0" mb="0" cb="0"/><line nr="71" mi="20" ci="0" mb="0" cb="0"/><line nr="80" mi="14" ci="0" mb="0" cb="0"/><line nr="81" mi="11" ci="0" mb="0" cb="0"/><line nr="90" mi="20" ci="0" mb="0" cb="0"/><line nr="99" mi="14" ci="0" mb="0" cb="0"/><line nr="100" mi="11" ci="0" mb="0" cb="0"/><line nr="109" mi="20" ci="0" mb="0" cb="0"/><line nr="116" mi="0" ci="11" mb="0" cb="0"/><line nr="123" mi="8" ci="0" mb="0" cb="0"/><line nr="130" mi="8" ci="0" mb="0" cb="0"/><line nr="138" mi="12" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="268" covered="20"/><counter type="LINE" missed="15" covered="2"/><counter type="COMPLEXITY" missed="15" covered="2"/><counter type="METHOD" missed="15" covered="2"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="Ints.kt"><line nr="33" mi="0" ci="8" mb="0" cb="2"/><line nr="40" mi="0" ci="8" mb="0" cb="2"/><line nr="47" mi="3" ci="0" mb="0" cb="0"/><line nr="54" mi="0" ci="14" mb="0" cb="0"/><line nr="61" mi="8" ci="0" mb="0" cb="0"/><line nr="68" mi="8" ci="0" mb="0" cb="0"/><line nr="75" mi="8" ci="0" mb="0" cb="0"/><line nr="82" mi="8" ci="0" mb="0" cb="0"/><line nr="89" mi="8" ci="0" mb="0" cb="0"/><line nr="96" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="51" covered="30"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="7" covered="3"/><counter type="COMPLEXITY" missed="7" covered="5"/><counter type="METHOD" missed="7" covered="3"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigDecimals.kt"><line nr="31" mi="20" ci="0" mb="0" cb="0"/><line nr="32" mi="1" ci="0" mb="0" cb="0"/><line nr="33" mi="1" ci="0" mb="0" cb="0"/><line nr="34" mi="1" ci="0" mb="0" cb="0"/><line nr="43" mi="20" ci="0" mb="0" cb="0"/><line nr="44" mi="1" ci="0" mb="0" cb="0"/><line nr="45" mi="1" ci="0" mb="0" cb="0"/><line nr="46" mi="1" ci="0" mb="0" cb="0"/><line nr="55" mi="20" ci="0" mb="0" cb="0"/><line nr="56" mi="1" ci="0" mb="0" cb="0"/><line nr="57" mi="1" ci="0" mb="0" cb="0"/><line nr="58" mi="1" ci="0" mb="0" cb="0"/><line nr="67" mi="20" ci="0" mb="0" cb="0"/><line nr="68" mi="1" ci="0" mb="0" cb="0"/><line nr="69" mi="1" ci="0" mb="0" cb="0"/><line nr="70" mi="1" ci="0" mb="0" cb="0"/><line nr="77" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="127" covered="0"/><counter type="LINE" missed="17" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Floats.kt"><line nr="27" mi="8" ci="0" mb="0" cb="0"/><line nr="34" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="536" covered="97"/><counter type="BRANCH" missed="2" covered="10"/><counter type="LINE" missed="50" covered="10"/><counter type="COMPLEXITY" missed="43" covered="15"/><counter type="METHOD" missed="42" covered="10"/><counter type="CLASS" missed="4" covered="4"/></package><package name="io/github/ltennstedt/finnmath/linear/builder"><class name="io/github/ltennstedt/finnmath/linear/builder/DoubleVectorBuilder$computationOfAbsent$1" sourcefilename="DoubleVectorBuilder.kt"><method name="invoke" desc="(I)D" line="42"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/LongVectorBuilderKt" sourcefilename="LongVectorBuilder.kt"><method name="longVector" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/LongVector;" line="29"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/ComplexVectorBuilder$computationOfAbsent$1" sourcefilename="ComplexVectorBuilder.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="43"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/LongVectorJavaBuilder" sourcefilename="LongVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="44"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="49"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/ComplexVectorBuilderKt" sourcefilename="ComplexVectorBuilder.kt"><method name="complexVector" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/ComplexVector;" line="30"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder$computationOfAbsent$1" sourcefilename="BigComplexVectorBuilder.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="43"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/ComplexVectorBuilder" sourcefilename="ComplexVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getComputationOfAbsent" desc="()Lkotlin/jvm/functions/Function1;" line="43"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setComputationOfAbsent" desc="(Lkotlin/jvm/functions/Function1;)V" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="45"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilderKt" sourcefilename="BigComplexVectorBuilder.kt"><method name="bigComplexVector" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="30"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/AbstractVectorBuilder" sourcefilename="AbstractVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="32"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSize" desc="()I" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setSize" desc="(I)V" line="38"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getEntries" desc="()Ljava/util/List;" line="52"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="entry" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/VectorEntry;" line="67"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="build" desc="()Ljava/lang/Object;" line="83"><counter type="INSTRUCTION" missed="67" covered="131"/><counter type="BRANCH" missed="7" covered="13"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="7" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="98"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="95" covered="170"/><counter type="BRANCH" missed="7" covered="13"/><counter type="LINE" missed="7" covered="18"/><counter type="COMPLEXITY" missed="9" covered="8"/><counter type="METHOD" missed="2" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/GaussianVectorJavaBuilder" sourcefilename="GaussianVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="46"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="51"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder" sourcefilename="BigComplexVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getComputationOfAbsent" desc="()Lkotlin/jvm/functions/Function1;" line="43"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setComputationOfAbsent" desc="(Lkotlin/jvm/functions/Function1;)V" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="45"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigIntegerVectorBuilder$computationOfAbsent$1" sourcefilename="BigIntegerVectorBuilder.kt"><method name="invoke" desc="(I)Ljava/math/BigInteger;" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigIntegerVectorJavaBuilder" sourcefilename="BigIntegerVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="46"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="51"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigGaussianVectorJavaBuilder" sourcefilename="BigGaussianVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="46"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="51"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/GaussianVectorBuilder" sourcefilename="GaussianVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getComputationOfAbsent" desc="()Lkotlin/jvm/functions/Function1;" line="43"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setComputationOfAbsent" desc="(Lkotlin/jvm/functions/Function1;)V" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="45"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/AbstractVectorJavaBuilder" sourcefilename="AbstractVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="52"><counter type="INSTRUCTION" missed="9" covered="14"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="set" desc="(ILjava/lang/Number;)Lio/github/ltennstedt/finnmath/linear/builder/AbstractVectorJavaBuilder;" line="79"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="set" desc="(Lio/github/ltennstedt/finnmath/linear/vector/VectorEntry;)Lio/github/ltennstedt/finnmath/linear/builder/AbstractVectorJavaBuilder;" line="96"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="computationOfAbsent" desc="(Ljava/util/function/IntFunction;)Lio/github/ltennstedt/finnmath/linear/builder/AbstractVectorJavaBuilder;" line="114"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="build" desc="()Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="126"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="144"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$build$2" desc="(I)V" line="127"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$null$1" desc="(ILio/github/ltennstedt/finnmath/linear/vector/VectorEntry;)Z" line="127"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$new$0" desc="(I)Ljava/lang/Number;" line="54"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="142" covered="14"/><counter type="BRANCH" missed="13" covered="1"/><counter type="LINE" missed="27" covered="4"/><counter type="COMPLEXITY" missed="15" covered="1"/><counter type="METHOD" missed="8" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/ComplexVectorJavaBuilder" sourcefilename="ComplexVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="45"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="50"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/LongVectorBuilder$computationOfAbsent$1" sourcefilename="LongVectorBuilder.kt"><method name="invoke" desc="(I)J" line="42"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/LongVectorBuilder" sourcefilename="LongVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="41"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getComputationOfAbsent" desc="()Lkotlin/jvm/functions/Function1;" line="42"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="setComputationOfAbsent" desc="(Lkotlin/jvm/functions/Function1;)V" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="44"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="7" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="1" covered="3"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/GaussianVectorBuilderKt" sourcefilename="GaussianVectorBuilder.kt"><method name="gaussianVector" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/GaussianVector;" line="30"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigGaussianVectorBuilder$computationOfAbsent$1" sourcefilename="BigGaussianVectorBuilder.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="43"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilder$computationOfAbsent$1" sourcefilename="BigDecimalVectorBuilder.kt"><method name="invoke" desc="(I)Ljava/math/BigDecimal;" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/DoubleVectorBuilderKt" sourcefilename="DoubleVectorBuilder.kt"><method name="doubleVector" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/DoubleVector;" line="29"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilder" sourcefilename="BigDecimalVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getComputationOfAbsent" desc="()Lkotlin/jvm/functions/Function1;" line="43"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setComputationOfAbsent" desc="(Lkotlin/jvm/functions/Function1;)V" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="45"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/DoubleVectorBuilder" sourcefilename="DoubleVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="41"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getComputationOfAbsent" desc="()Lkotlin/jvm/functions/Function1;" line="42"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setComputationOfAbsent" desc="(Lkotlin/jvm/functions/Function1;)V" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="44"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigIntegerVectorBuilder" sourcefilename="BigIntegerVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getComputationOfAbsent" desc="()Lkotlin/jvm/functions/Function1;" line="43"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setComputationOfAbsent" desc="(Lkotlin/jvm/functions/Function1;)V" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="45"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/DoubleVectorJavaBuilder" sourcefilename="DoubleVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="44"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="49"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/GaussianVectorBuilder$computationOfAbsent$1" sourcefilename="GaussianVectorBuilder.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="43"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigGaussianVectorBuilder" sourcefilename="BigGaussianVectorBuilder.kt"><method name="&lt;init&gt;" desc="()V" line="42"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getComputationOfAbsent" desc="()Lkotlin/jvm/functions/Function1;" line="43"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setComputationOfAbsent" desc="(Lkotlin/jvm/functions/Function1;)V" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="45"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigGaussianVectorBuilderKt" sourcefilename="BigGaussianVectorBuilder.kt"><method name="bigGaussianVector" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/BigGaussianVector;" line="30"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigIntegerVectorBuilderKt" sourcefilename="BigIntegerVectorBuilder.kt"><method name="bigIntegerVector" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/BigIntegerVector;" line="30"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorJavaBuilder" sourcefilename="BigDecimalVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="45"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="50"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilderKt" sourcefilename="BigDecimalVectorBuilder.kt"><method name="bigDecimalVector" desc="(Lkotlin/jvm/functions/Function1;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="30"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/BigComplexVectorJavaBuilder" sourcefilename="BigComplexVectorJavaBuilder.java"><method name="&lt;init&gt;" desc="(I)V" line="46"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="51"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/builder/MutableVectorEntry" sourcefilename="MutableVectorEntry.kt"><method name="&lt;init&gt;" desc="()V" line="33"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getIndex" desc="()I" line="34"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setIndex" desc="(I)V" line="34"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getElement" desc="()Ljava/lang/Number;" line="35"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="setElement" desc="(Ljava/lang/Number;)V" line="35"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toVectorEntry" desc="()Lio/github/ltennstedt/finnmath/linear/vector/VectorEntry;" line="42"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="45"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="23" covered="22"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="3" covered="4"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="BigDecimalVectorJavaBuilder.java"><line nr="45" mi="3" ci="0" mb="0" cb="0"/><line nr="46" mi="1" ci="0" mb="0" cb="0"/><line nr="50" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="BigComplexVectorJavaBuilder.java"><line nr="46" mi="3" ci="0" mb="0" cb="0"/><line nr="47" mi="1" ci="0" mb="0" cb="0"/><line nr="51" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="GaussianVectorJavaBuilder.java"><line nr="46" mi="3" ci="0" mb="0" cb="0"/><line nr="47" mi="1" ci="0" mb="0" cb="0"/><line nr="51" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="DoubleVectorJavaBuilder.java"><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="45" mi="1" ci="0" mb="0" cb="0"/><line nr="49" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="ComplexVectorJavaBuilder.java"><line nr="45" mi="3" ci="0" mb="0" cb="0"/><line nr="46" mi="1" ci="0" mb="0" cb="0"/><line nr="50" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="AbstractVectorJavaBuilder.java"><line nr="52" mi="0" ci="5" mb="0" cb="0"/><line nr="54" mi="4" ci="4" mb="0" cb="0"/><line nr="64" mi="0" ci="2" mb="0" cb="0"/><line nr="65" mi="5" ci="3" mb="1" cb="1"/><line nr="66" mi="3" ci="0" mb="0" cb="0"/><line nr="67" mi="1" ci="0" mb="0" cb="0"/><line nr="79" mi="13" ci="0" mb="4" cb="0"/><line nr="80" mi="4" ci="0" mb="0" cb="0"/><line nr="81" mi="9" ci="0" mb="0" cb="0"/><line nr="82" mi="2" ci="0" mb="0" cb="0"/><line nr="83" mi="2" ci="0" mb="0" cb="0"/><line nr="96" mi="4" ci="0" mb="0" cb="0"/><line nr="97" mi="3" ci="0" mb="0" cb="0"/><line nr="98" mi="12" ci="0" mb="4" cb="0"/><line nr="99" mi="1" ci="0" mb="0" cb="0"/><line nr="100" mi="5" ci="0" mb="0" cb="0"/><line nr="101" mi="2" ci="0" mb="0" cb="0"/><line nr="102" mi="2" ci="0" mb="0" cb="0"/><line nr="114" mi="6" ci="0" mb="0" cb="0"/><line nr="115" mi="2" ci="0" mb="0" cb="0"/><line nr="116" mi="2" ci="0" mb="0" cb="0"/><line nr="126" mi="7" ci="0" mb="0" cb="0"/><line nr="127" mi="15" ci="0" mb="4" cb="0"/><line nr="128" mi="13" ci="0" mb="0" cb="0"/><line nr="130" mi="1" ci="0" mb="0" cb="0"/><line nr="131" mi="8" ci="0" mb="0" cb="0"/><line nr="144" mi="6" ci="0" mb="0" cb="0"/><line nr="145" mi="4" ci="0" mb="0" cb="0"/><line nr="146" mi="4" ci="0" mb="0" cb="0"/><line nr="147" mi="1" ci="0" mb="0" cb="0"/><line nr="148" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="142" covered="14"/><counter type="BRANCH" missed="13" covered="1"/><counter type="LINE" missed="27" covered="4"/><counter type="COMPLEXITY" missed="15" covered="1"/><counter type="METHOD" missed="8" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigGaussianVectorJavaBuilder.java"><line nr="46" mi="3" ci="0" mb="0" cb="0"/><line nr="47" mi="1" ci="0" mb="0" cb="0"/><line nr="51" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="AbstractVectorBuilder.kt"><line nr="32" mi="0" ci="3" mb="0" cb="0"/><line nr="38" mi="3" ci="4" mb="0" cb="0"/><line nr="52" mi="0" ci="11" mb="0" cb="0"/><line nr="67" mi="0" ci="4" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="3" mb="0" cb="0"/><line nr="70" mi="0" ci="5" mb="0" cb="0"/><line nr="71" mi="0" ci="2" mb="0" cb="0"/><line nr="83" mi="20" ci="18" mb="2" cb="2"/><line nr="84" mi="0" ci="15" mb="0" cb="0"/><line nr="85" mi="0" ci="9" mb="0" cb="0"/><line nr="86" mi="22" ci="13" mb="2" cb="2"/><line nr="87" mi="0" ci="4" mb="0" cb="0"/><line nr="88" mi="11" ci="14" mb="2" cb="2"/><line nr="89" mi="14" ci="0" mb="0" cb="0"/><line nr="91" mi="0" ci="14" mb="1" cb="3"/><line nr="92" mi="0" ci="33" mb="0" cb="4"/><line nr="94" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="8" mb="0" cb="0"/><line nr="98" mi="2" ci="0" mb="0" cb="0"/><line nr="99" mi="4" ci="0" mb="0" cb="0"/><line nr="100" mi="4" ci="0" mb="0" cb="0"/><line nr="101" mi="4" ci="0" mb="0" cb="0"/><line nr="102" mi="4" ci="0" mb="0" cb="0"/><line nr="103" mi="7" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="95" covered="170"/><counter type="BRANCH" missed="7" covered="13"/><counter type="LINE" missed="7" covered="18"/><counter type="COMPLEXITY" missed="9" covered="8"/><counter type="METHOD" missed="2" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="GaussianVectorBuilder.kt"><line nr="30" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="4" ci="0" mb="0" cb="0"/><line nr="32" mi="4" ci="0" mb="0" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="13" ci="0" mb="0" cb="0"/><line nr="45" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="3" covered="0"/></sourcefile><sourcefile name="ComplexVectorBuilder.kt"><line nr="30" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="4" ci="0" mb="0" cb="0"/><line nr="32" mi="4" ci="0" mb="0" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="13" ci="0" mb="0" cb="0"/><line nr="45" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="3" covered="0"/></sourcefile><sourcefile name="BigComplexVectorBuilder.kt"><line nr="30" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="4" ci="0" mb="0" cb="0"/><line nr="32" mi="4" ci="0" mb="0" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="13" ci="0" mb="0" cb="0"/><line nr="45" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="3" covered="0"/></sourcefile><sourcefile name="BigIntegerVectorBuilder.kt"><line nr="30" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="4" ci="0" mb="0" cb="0"/><line nr="32" mi="4" ci="0" mb="0" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="18" ci="0" mb="0" cb="0"/><line nr="45" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="3" covered="0"/></sourcefile><sourcefile name="LongVectorBuilder.kt"><line nr="29" mi="0" ci="4" mb="0" cb="0"/><line nr="30" mi="0" ci="4" mb="0" cb="0"/><line nr="31" mi="0" ci="4" mb="0" cb="0"/><line nr="41" mi="0" ci="3" mb="0" cb="0"/><line nr="42" mi="4" ci="9" mb="0" cb="0"/><line nr="44" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="7" covered="30"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="3"/></sourcefile><sourcefile name="BigIntegerVectorJavaBuilder.java"><line nr="46" mi="3" ci="0" mb="0" cb="0"/><line nr="47" mi="1" ci="0" mb="0" cb="0"/><line nr="51" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="BigGaussianVectorBuilder.kt"><line nr="30" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="4" ci="0" mb="0" cb="0"/><line nr="32" mi="4" ci="0" mb="0" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="13" ci="0" mb="0" cb="0"/><line nr="45" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="3" covered="0"/></sourcefile><sourcefile name="LongVectorJavaBuilder.java"><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="45" mi="1" ci="0" mb="0" cb="0"/><line nr="49" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="BigDecimalVectorBuilder.kt"><line nr="30" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="4" ci="0" mb="0" cb="0"/><line nr="32" mi="4" ci="0" mb="0" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="18" ci="0" mb="0" cb="0"/><line nr="45" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="3" covered="0"/></sourcefile><sourcefile name="DoubleVectorBuilder.kt"><line nr="29" mi="4" ci="0" mb="0" cb="0"/><line nr="30" mi="4" ci="0" mb="0" cb="0"/><line nr="31" mi="4" ci="0" mb="0" cb="0"/><line nr="41" mi="3" ci="0" mb="0" cb="0"/><line nr="42" mi="13" ci="0" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="3" covered="0"/></sourcefile><sourcefile name="MutableVectorEntry.kt"><line nr="33" mi="0" ci="3" mb="0" cb="0"/><line nr="34" mi="3" ci="4" mb="0" cb="0"/><line nr="35" mi="3" ci="4" mb="0" cb="0"/><line nr="42" mi="0" ci="11" mb="0" cb="0"/><line nr="45" mi="17" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="23" covered="22"/><counter type="LINE" missed="1" covered="4"/><counter type="COMPLEXITY" missed="3" covered="4"/><counter type="METHOD" missed="3" covered="4"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="584" covered="236"/><counter type="BRANCH" missed="20" covered="14"/><counter type="LINE" missed="101" covered="32"/><counter type="COMPLEXITY" missed="86" covered="18"/><counter type="METHOD" missed="72" covered="15"/><counter type="CLASS" missed="29" covered="6"/></package><package name="io/github/ltennstedt/finnmath/number/range"><class name="io/github/ltennstedt/finnmath/number/range/FractionRange" sourcefilename="FractionRange.kt"><method name="&lt;init&gt;" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)V" line="33"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getStart" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="37"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getEndInclusive" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="38"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)Z" line="33"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="()Z" line="33"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="47"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="37"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/range/BigFractionRange$Companion" sourcefilename="BigFractionRange.kt"/><class name="io/github/ltennstedt/finnmath/number/range/BigFractionRange" sourcefilename="BigFractionRange.kt"><method name="&lt;init&gt;" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)V" line="34"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getStart" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEndInclusive" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="39"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="contains" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)Z" line="34"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="()Z" line="34"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="48"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/range/FinnmathFractionRange$Companion" sourcefilename="FinnmathFractionRange.kt"/><class name="io/github/ltennstedt/finnmath/number/range/FinnmathFractionRange" sourcefilename="FinnmathFractionRange.kt"><method name="getLength" desc="()Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="46"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/range/FinnmathFractionRange$DefaultImpls" sourcefilename="FinnmathFractionRange.kt"><method name="contains" desc="(Lio/github/ltennstedt/finnmath/number/range/FinnmathFractionRange;Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Z" line="35"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="(Lio/github/ltennstedt/finnmath/number/range/FinnmathFractionRange;)Z" line="35"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="1" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/range/FractionRange$Companion" sourcefilename="FractionRange.kt"/><sourcefile name="FractionRange.kt"><line nr="33" mi="6" ci="6" mb="0" cb="0"/><line nr="36" mi="0" ci="1" mb="0" cb="0"/><line nr="37" mi="0" ci="6" mb="0" cb="0"/><line nr="38" mi="0" ci="6" mb="0" cb="0"/><line nr="47" mi="0" ci="7" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="37"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="1" covered="5"/><counter type="METHOD" missed="1" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="FinnmathFractionRange.kt"><line nr="35" mi="5" ci="3" mb="0" cb="0"/><line nr="46" mi="0" ci="10" mb="0" cb="0"/><line nr="51" mi="1" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="17"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="1" covered="2"/><counter type="CLASS" missed="0" covered="2"/></sourcefile><sourcefile name="BigFractionRange.kt"><line nr="34" mi="12" ci="0" mb="0" cb="0"/><line nr="37" mi="1" ci="0" mb="0" cb="0"/><line nr="38" mi="6" ci="0" mb="0" cb="0"/><line nr="39" mi="6" ci="0" mb="0" cb="0"/><line nr="48" mi="7" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="61" covered="54"/><counter type="LINE" missed="5" covered="8"/><counter type="COMPLEXITY" missed="8" covered="7"/><counter type="METHOD" missed="8" covered="7"/><counter type="CLASS" missed="1" covered="3"/></package><package name="io/github/ltennstedt/finnmath/linear/matrix"><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix$isSkewSymmetric$2" sourcefilename="AbstractMatrix.kt"><method name="invoke" desc="()Z" line="125"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/matrix/MatrixEntry$Companion" sourcefilename="MatrixEntry.kt"/><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix$Companion" sourcefilename="AbstractMatrix.kt"/><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix$rowIndices$2" sourcefilename="AbstractMatrix.kt"><method name="invoke" desc="()Ljava/util/Set;" line="132"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix$diagonalElements$2" sourcefilename="AbstractMatrix.kt"><method name="invoke" desc="()Ljava/util/List;" line="154"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix$columnIndices$2" sourcefilename="AbstractMatrix.kt"><method name="invoke" desc="()Ljava/util/Set;" line="139"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/matrix/MatrixEntry" sourcefilename="MatrixEntry.kt"><method name="&lt;init&gt;" desc="(IILjava/lang/Number;)V" line="31"><counter type="INSTRUCTION" missed="69" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="8" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRowIndex" desc="()I" line="32"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getColumnIndex" desc="()I" line="33"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getElement" desc="()Ljava/lang/Number;" line="34"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="compareTo" desc="(Lio/github/ltennstedt/finnmath/linear/matrix/MatrixEntry;)I" line="41"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="51"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="108" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix$isSymmetric$2" sourcefilename="AbstractMatrix.kt"><method name="invoke" desc="()Z" line="118"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix$diagonalEntries$2" sourcefilename="AbstractMatrix.kt"><method name="invoke" desc="()Ljava/util/Set;" line="163"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix$elements$2" sourcefilename="AbstractMatrix.kt"><method name="invoke" desc="()Ljava/util/List;" line="146"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix" sourcefilename="AbstractMatrix.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="44"><counter type="INSTRUCTION" missed="184" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="18" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEntries" desc="()Ljava/util/Set;" line="52"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSquare" desc="()Z" line="60"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isTriangular" desc="()Z" line="68"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isUpperTriangular" desc="()Z" line="76"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLowerTriangular" desc="()Z" line="86"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isDiagonal" desc="()Z" line="96"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isIdentity" desc="()Z" line="104"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSymmetric" desc="()Z" line="118"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isSkewSymmetric" desc="()Z" line="125"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRowIndices" desc="()Ljava/util/Set;" line="132"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getColumnIndices" desc="()Ljava/util/Set;" line="139"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getElements" desc="()Ljava/util/List;" line="146"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDiagonalElements" desc="()Ljava/util/List;" line="153"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDiagonalEntries" desc="()Ljava/util/Set;" line="162"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRowSize" desc="()I" line="172"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getColumnSize" desc="()I" line="180"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="trace" desc="()Ljava/lang/Number;" line="254"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="determinant" desc="()Ljava/lang/Number;" line="262"><counter type="INSTRUCTION" missed="55" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="(II)Ljava/lang/Number;" line="330"><counter type="INSTRUCTION" missed="88" covered="0"/><counter type="BRANCH" missed="12" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="entry" desc="(II)Lio/github/ltennstedt/finnmath/linear/matrix/MatrixEntry;" line="345"><counter type="INSTRUCTION" missed="105" covered="0"/><counter type="BRANCH" missed="18" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="row" desc="(I)Ljava/util/Map;" line="360"><counter type="INSTRUCTION" missed="85" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="column" desc="(I)Ljava/util/Map;" line="371"><counter type="INSTRUCTION" missed="87" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="contains" desc="(Ljava/lang/Number;)Z" line="398"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equalsByComparing" desc="(Lio/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix;)Z" line="408"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="doesNotEqualByComparing" desc="(Lio/github/ltennstedt/finnmath/linear/matrix/AbstractMatrix;)Z" line="417"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="addDiagonalElements" desc="()Ljava/lang/Number;" line="424"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="450"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="453"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="458"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="162"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="951" covered="0"/><counter type="BRANCH" missed="100" covered="0"/><counter type="LINE" missed="59" covered="0"/><counter type="COMPLEXITY" missed="81" covered="0"/><counter type="METHOD" missed="31" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="MatrixEntry.kt"><line nr="31" mi="3" ci="0" mb="0" cb="0"/><line nr="32" mi="6" ci="0" mb="0" cb="0"/><line nr="33" mi="6" ci="0" mb="0" cb="0"/><line nr="34" mi="6" ci="0" mb="0" cb="0"/><line nr="36" mi="1" ci="0" mb="0" cb="0"/><line nr="37" mi="26" ci="0" mb="4" cb="0"/><line nr="38" mi="26" ci="0" mb="4" cb="0"/><line nr="39" mi="1" ci="0" mb="0" cb="0"/><line nr="41" mi="5" ci="0" mb="0" cb="0"/><line nr="51" mi="17" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="108" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="AbstractMatrix.kt"><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="52" mi="6" ci="0" mb="0" cb="0"/><line nr="60" mi="9" ci="0" mb="2" cb="0"/><line nr="68" mi="10" ci="0" mb="4" cb="0"/><line nr="76" mi="24" ci="0" mb="4" cb="0"/><line nr="77" mi="10" ci="0" mb="0" cb="0"/><line nr="78" mi="17" ci="0" mb="2" cb="0"/><line nr="86" mi="24" ci="0" mb="4" cb="0"/><line nr="87" mi="10" ci="0" mb="0" cb="0"/><line nr="88" mi="17" ci="0" mb="2" cb="0"/><line nr="96" mi="10" ci="0" mb="4" cb="0"/><line nr="104" mi="23" ci="0" mb="4" cb="0"/><line nr="118" mi="33" ci="0" mb="4" cb="0"/><line nr="125" mi="34" ci="0" mb="4" cb="0"/><line nr="132" mi="36" ci="0" mb="0" cb="0"/><line nr="139" mi="36" ci="0" mb="0" cb="0"/><line nr="146" mi="35" ci="0" mb="0" cb="0"/><line nr="153" mi="17" ci="0" mb="0" cb="0"/><line nr="154" mi="36" ci="0" mb="4" cb="0"/><line nr="162" mi="23" ci="0" mb="0" cb="0"/><line nr="163" mi="29" ci="0" mb="4" cb="0"/><line nr="172" mi="4" ci="0" mb="0" cb="0"/><line nr="180" mi="4" ci="0" mb="0" cb="0"/><line nr="189" mi="1" ci="0" mb="0" cb="0"/><line nr="190" mi="31" ci="0" mb="4" cb="0"/><line nr="191" mi="9" ci="0" mb="0" cb="0"/><line nr="192" mi="21" ci="0" mb="2" cb="0"/><line nr="193" mi="13" ci="0" mb="0" cb="0"/><line nr="195" mi="9" ci="0" mb="0" cb="0"/><line nr="196" mi="21" ci="0" mb="2" cb="0"/><line nr="197" mi="13" ci="0" mb="0" cb="0"/><line nr="199" mi="1" ci="0" mb="0" cb="0"/><line nr="254" mi="3" ci="0" mb="0" cb="0"/><line nr="262" mi="31" ci="0" mb="2" cb="0"/><line nr="263" mi="2" ci="0" mb="0" cb="0"/><line nr="264" mi="6" ci="0" mb="2" cb="0"/><line nr="265" mi="7" ci="0" mb="2" cb="0"/><line nr="266" mi="7" ci="0" mb="2" cb="0"/><line nr="267" mi="2" ci="0" mb="0" cb="0"/><line nr="330" mi="40" ci="0" mb="6" cb="0"/><line nr="331" mi="29" ci="0" mb="6" cb="0"/><line nr="332" mi="13" ci="0" mb="0" cb="0"/><line nr="334" mi="6" ci="0" mb="0" cb="0"/><line nr="345" mi="40" ci="0" mb="6" cb="0"/><line nr="346" mi="29" ci="0" mb="6" cb="0"/><line nr="347" mi="13" ci="0" mb="0" cb="0"/><line nr="350" mi="23" ci="0" mb="6" cb="0"/><line nr="360" mi="40" ci="0" mb="6" cb="0"/><line nr="361" mi="45" ci="0" mb="4" cb="0"/><line nr="371" mi="29" ci="0" mb="6" cb="0"/><line nr="372" mi="13" ci="0" mb="0" cb="0"/><line nr="374" mi="45" ci="0" mb="4" cb="0"/><line nr="398" mi="5" ci="0" mb="0" cb="0"/><line nr="408" mi="30" ci="0" mb="2" cb="0"/><line nr="417" mi="8" ci="0" mb="2" cb="0"/><line nr="424" mi="15" ci="0" mb="0" cb="0"/><line nr="450" mi="11" ci="0" mb="0" cb="0"/><line nr="453" mi="5" ci="0" mb="2" cb="0"/><line nr="454" mi="5" ci="0" mb="2" cb="0"/><line nr="455" mi="7" ci="0" mb="0" cb="0"/><line nr="458" mi="13" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1103" covered="0"/><counter type="BRANCH" missed="116" covered="0"/><counter type="LINE" missed="61" covered="0"/><counter type="COMPLEXITY" missed="96" covered="0"/><counter type="METHOD" missed="38" covered="0"/><counter type="CLASS" missed="8" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="1211" covered="0"/><counter type="BRANCH" missed="124" covered="0"/><counter type="LINE" missed="71" covered="0"/><counter type="COMPLEXITY" missed="106" covered="0"/><counter type="METHOD" missed="44" covered="0"/><counter type="CLASS" missed="9" covered="0"/></package><package name="io/github/ltennstedt/finnmath/number/complex"><class name="io/github/ltennstedt/finnmath/number/complex/BigComplex$isUnit$2" sourcefilename="BigComplex.kt"><method name="invoke" desc="()Z" line="48"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/Gaussian$isUnit$2" sourcefilename="Gaussian.kt"><method name="invoke" desc="()Z" line="46"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/PolarForm$Companion" sourcefilename="PolarForm.kt"/><class name="io/github/ltennstedt/finnmath/number/complex/BigPolarForm" sourcefilename="BigPolarForm.kt"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="42"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(DD)V" line="54"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(DDLjava/math/MathContext;)V" line="65"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplexNumber" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="71"><counter type="INSTRUCTION" missed="44" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplexNumber" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="82"><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="141" covered="0"/><counter type="LINE" missed="15" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/AbstractPolarForm" sourcefilename="AbstractPolarForm.kt"><method name="&lt;init&gt;" desc="(Ljava/lang/Comparable;Ljava/lang/Comparable;)V" line="21"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getRadial" desc="()Ljava/lang/Comparable;" line="24"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getAngular" desc="()Ljava/lang/Comparable;" line="25"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equalsByComparing" desc="(Lio/github/ltennstedt/finnmath/number/complex/AbstractPolarForm;)Z" line="40"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="doesNotequalsByComparing" desc="(Lio/github/ltennstedt/finnmath/number/complex/AbstractPolarForm;)Z" line="47"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="49"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="52"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="58"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="112" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="15" covered="0"/><counter type="METHOD" missed="8" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/BigGaussian" sourcefilename="BigGaussian.kt"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="41"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="41"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isUnit" desc="()Z" line="48"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(II)V" line="58"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="58"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJ)V" line="68"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="68"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="71"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="73"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="78"><counter type="INSTRUCTION" missed="91" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="84"><counter type="INSTRUCTION" missed="183" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;Lio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="99"><counter type="INSTRUCTION" missed="214" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="108"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(ILio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="119"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="125"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="128"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="139"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="absPow2" desc="()Ljava/math/BigInteger;" line="143"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="145"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="152"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="159"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="conjugate" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="161"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="164"><counter type="INSTRUCTION" missed="70" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="177"><counter type="INSTRUCTION" missed="75" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toPolarForm" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="184"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toPolarForm" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="195"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="204"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="211"><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equalsByComparing" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;)Z" line="217"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="48"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="1274" covered="0"/><counter type="BRANCH" missed="32" covered="0"/><counter type="LINE" missed="74" covered="0"/><counter type="COMPLEXITY" missed="46" covered="0"/><counter type="METHOD" missed="30" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/Complex$isUnit$2" sourcefilename="Complex.kt"><method name="invoke" desc="()Z" line="46"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/BigPolarForm$Companion" sourcefilename="BigPolarForm.kt"/><class name="io/github/ltennstedt/finnmath/number/complex/AbstractPolarForm$Companion" sourcefilename="AbstractPolarForm.kt"/><class name="io/github/ltennstedt/finnmath/number/complex/BigGaussian$Companion" sourcefilename="BigGaussian.kt"/><class name="io/github/ltennstedt/finnmath/number/complex/Complex" sourcefilename="Complex.kt"><method name="&lt;init&gt;" desc="(DD)V" line="39"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(DDILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="39"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isUnit" desc="()Z" line="46"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(II)V" line="56"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="56"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJ)V" line="66"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="66"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(FF)V" line="76"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(FFILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="76"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/number/complex/Complex;)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="78"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/number/complex/Complex;)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="80"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lio/github/ltennstedt/finnmath/number/complex/Complex;)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="84"><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lio/github/ltennstedt/finnmath/number/complex/Complex;)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="90"><counter type="INSTRUCTION" missed="87" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="98"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="104"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="107"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="absPow2" desc="()Ljava/lang/Double;" line="111"><counter type="INSTRUCTION" missed="27" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="()Ljava/lang/Double;" line="113"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="conjugate" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="115"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="()Ljava/lang/Double;" line="118"><counter type="INSTRUCTION" missed="47" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toPolarForm" desc="()Lio/github/ltennstedt/finnmath/number/complex/PolarForm;" line="125"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigPolarForm" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="135"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigPolarForm" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="145"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="154"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="161"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equalsByComparing" desc="(Lio/github/ltennstedt/finnmath/number/complex/Complex;)Z" line="164"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="46"><counter type="INSTRUCTION" missed="58" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="621" covered="0"/><counter type="BRANCH" missed="22" covered="0"/><counter type="LINE" missed="53" covered="0"/><counter type="COMPLEXITY" missed="38" covered="0"/><counter type="METHOD" missed="27" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/Gaussian" sourcefilename="Gaussian.kt"><method name="&lt;init&gt;" desc="(JJ)V" line="39"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="39"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isUnit" desc="()Z" line="46"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(II)V" line="56"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="56"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/number/complex/Gaussian;)Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="59"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/number/complex/Gaussian;)Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="61"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lio/github/ltennstedt/finnmath/number/complex/Gaussian;)Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="66"><counter type="INSTRUCTION" missed="37" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lio/github/ltennstedt/finnmath/number/complex/Gaussian;)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="72"><counter type="INSTRUCTION" missed="91" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="80"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="86"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="89"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="absPow2" desc="()Ljava/lang/Long;" line="93"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="()Ljava/lang/Double;" line="95"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="conjugate" desc="()Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="97"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="()Ljava/lang/Double;" line="100"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toPolarForm" desc="()Lio/github/ltennstedt/finnmath/number/complex/PolarForm;" line="107"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigPolarForm" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="118"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigPolarForm" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="129"><counter type="INSTRUCTION" missed="53" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplex" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="138"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigGaussian" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="145"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplex" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="152"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equalsByComparing" desc="(Lio/github/ltennstedt/finnmath/number/complex/Gaussian;)Z" line="155"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="46"><counter type="INSTRUCTION" missed="58" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="624" covered="0"/><counter type="BRANCH" missed="22" covered="0"/><counter type="LINE" missed="53" covered="0"/><counter type="COMPLEXITY" missed="35" covered="0"/><counter type="METHOD" missed="24" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/Gaussian$Companion" sourcefilename="Gaussian.kt"/><class name="io/github/ltennstedt/finnmath/number/complex/AbstractComplex" sourcefilename="AbstractComplex.kt"><method name="&lt;init&gt;" desc="(Ljava/lang/Number;Ljava/lang/Number;)V" line="41"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getReal" desc="()Ljava/lang/Number;" line="42"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getImaginary" desc="()Ljava/lang/Number;" line="43"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toByte" desc="()B" line="133"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toShort" desc="()S" line="135"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toInt" desc="()I" line="137"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toLong" desc="()J" line="139"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toFloat" desc="()F" line="141"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toDouble" desc="()D" line="143"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toChar" desc="()C" line="145"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="doesNotEqualByComparing" desc="(Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;)Z" line="167"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="plus" desc="(Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;)Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;" line="169"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="minus" desc="(Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;)Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;" line="171"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="times" desc="(Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;)Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;" line="173"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="div" desc="(Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;)Ljava/lang/Object;" line="175"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unaryPlus" desc="()Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;" line="178"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unaryMinus" desc="()Lio/github/ltennstedt/finnmath/number/complex/AbstractComplex;" line="180"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="operator1" desc="()Ljava/lang/Number;" line="182"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="operator2" desc="()Ljava/lang/Number;" line="184"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="186"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="189"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="195"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="161" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="25" covered="0"/><counter type="COMPLEXITY" missed="27" covered="0"/><counter type="METHOD" missed="22" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/Complex$Companion" sourcefilename="Complex.kt"/><class name="io/github/ltennstedt/finnmath/number/complex/PolarForm" sourcefilename="PolarForm.kt"><method name="&lt;init&gt;" desc="(DD)V" line="41"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplexNumber" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="53"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigPolarForm" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="60"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigPolarForm" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="67"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="102" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/AbstractComplex$Companion" sourcefilename="AbstractComplex.kt"/><class name="io/github/ltennstedt/finnmath/number/complex/BigComplex$Companion" sourcefilename="BigComplex.kt"/><class name="io/github/ltennstedt/finnmath/number/complex/BigGaussian$isUnit$2" sourcefilename="BigGaussian.kt"><method name="invoke" desc="()Z" line="48"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/complex/BigComplex" sourcefilename="BigComplex.kt"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)V" line="41"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="41"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isUnit" desc="()Z" line="48"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(II)V" line="58"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="58"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IILjava/math/MathContext;)V" line="68"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IILjava/math/MathContext;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="68"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJ)V" line="81"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="81"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJLjava/math/MathContext;)V" line="91"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJLjava/math/MathContext;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="91"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(FF)V" line="104"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(FFILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="104"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(FFLjava/math/MathContext;)V" line="112"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(FFLjava/math/MathContext;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="112"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(DD)V" line="125"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(DDILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="125"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(DDLjava/math/MathContext;)V" line="133"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(DDLjava/math/MathContext;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="133"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="146"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="146"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;Lio/github/ltennstedt/finnmath/FinnmathContext;)V" line="162"><counter type="INSTRUCTION" missed="44" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;Lio/github/ltennstedt/finnmath/FinnmathContext;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="158"><counter type="INSTRUCTION" missed="16" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="167"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="174"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="179"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="192"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract$default" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;Lio/github/ltennstedt/finnmath/number/complex/BigComplex;Ljava/math/MathContext;ILjava/lang/Object;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="191"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="197"><counter type="INSTRUCTION" missed="91" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="208"><counter type="INSTRUCTION" missed="56" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="216"><counter type="INSTRUCTION" missed="162" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="231"><counter type="INSTRUCTION" missed="97" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="242"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(ILjava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="253"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="259"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="267"><counter type="INSTRUCTION" missed="27" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="270"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="281"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="absPow2" desc="()Ljava/math/BigDecimal;" line="285"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="absPow2" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="293"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="()Ljava/math/BigDecimal;" line="295"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="302"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="conjugate" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="304"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="conjugate" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="311"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="()Ljava/math/BigDecimal;" line="314"><counter type="INSTRUCTION" missed="67" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="argument" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="327"><counter type="INSTRUCTION" missed="58" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toPolarForm" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="334"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toPolarForm" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigPolarForm;" line="345"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equalsByComparing" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;)Z" line="350"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="48"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="1555" covered="0"/><counter type="BRANCH" missed="32" covered="0"/><counter type="LINE" missed="115" covered="0"/><counter type="COMPLEXITY" missed="66" covered="0"/><counter type="METHOD" missed="50" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="AbstractPolarForm.kt"><line nr="21" mi="2" ci="0" mb="0" cb="0"/><line nr="23" mi="1" ci="0" mb="0" cb="0"/><line nr="24" mi="6" ci="0" mb="0" cb="0"/><line nr="25" mi="6" ci="0" mb="0" cb="0"/><line nr="40" mi="16" ci="0" mb="4" cb="0"/><line nr="47" mi="8" ci="0" mb="2" cb="0"/><line nr="49" mi="16" ci="0" mb="0" cb="0"/><line nr="52" mi="5" ci="0" mb="2" cb="0"/><line nr="53" mi="5" ci="0" mb="2" cb="0"/><line nr="54" mi="18" ci="0" mb="4" cb="0"/><line nr="58" mi="17" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="112" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="11" covered="0"/><counter type="COMPLEXITY" missed="15" covered="0"/><counter type="METHOD" missed="8" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Complex.kt"><line nr="39" mi="8" ci="0" mb="0" cb="0"/><line nr="41" mi="2" ci="0" mb="0" cb="0"/><line nr="42" mi="2" ci="0" mb="0" cb="0"/><line nr="43" mi="3" ci="0" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="46" mi="29" ci="0" mb="0" cb="0"/><line nr="56" mi="17" ci="0" mb="0" cb="0"/><line nr="66" mi="17" ci="0" mb="0" cb="0"/><line nr="76" mi="17" ci="0" mb="0" cb="0"/><line nr="78" mi="18" ci="0" mb="0" cb="0"/><line nr="80" mi="3" ci="0" mb="0" cb="0"/><line nr="81" mi="14" ci="0" mb="0" cb="0"/><line nr="82" mi="1" ci="0" mb="0" cb="0"/><line nr="84" mi="3" ci="0" mb="0" cb="0"/><line nr="85" mi="15" ci="0" mb="0" cb="0"/><line nr="86" mi="15" ci="0" mb="0" cb="0"/><line nr="87" mi="1" ci="0" mb="0" cb="0"/><line nr="90" mi="20" ci="0" mb="2" cb="0"/><line nr="91" mi="26" ci="0" mb="0" cb="0"/><line nr="92" mi="4" ci="0" mb="0" cb="0"/><line nr="93" mi="17" ci="0" mb="0" cb="0"/><line nr="94" mi="17" ci="0" mb="0" cb="0"/><line nr="98" mi="1" ci="0" mb="0" cb="0"/><line nr="99" mi="14" ci="0" mb="2" cb="0"/><line nr="100" mi="4" ci="0" mb="2" cb="0"/><line nr="101" mi="9" ci="0" mb="0" cb="0"/><line nr="102" mi="1" ci="0" mb="0" cb="0"/><line nr="104" mi="12" ci="0" mb="0" cb="0"/><line nr="107" mi="20" ci="0" mb="2" cb="0"/><line nr="108" mi="6" ci="0" mb="0" cb="0"/><line nr="111" mi="27" ci="0" mb="0" cb="0"/><line nr="113" mi="10" ci="0" mb="0" cb="0"/><line nr="115" mi="11" ci="0" mb="0" cb="0"/><line nr="118" mi="22" ci="0" mb="2" cb="0"/><line nr="119" mi="8" ci="0" mb="0" cb="0"/><line nr="120" mi="5" ci="0" mb="0" cb="0"/><line nr="121" mi="12" ci="0" mb="2" cb="0"/><line nr="125" mi="22" ci="0" mb="2" cb="0"/><line nr="126" mi="10" ci="0" mb="0" cb="0"/><line nr="135" mi="22" ci="0" mb="2" cb="0"/><line nr="136" mi="10" ci="0" mb="0" cb="0"/><line nr="145" mi="22" ci="0" mb="2" cb="0"/><line nr="146" mi="11" ci="0" mb="0" cb="0"/><line nr="154" mi="10" ci="0" mb="0" cb="0"/><line nr="161" mi="11" ci="0" mb="0" cb="0"/><line nr="164" mi="20" ci="0" mb="4" cb="0"/><line nr="173" mi="8" ci="0" mb="0" cb="0"/><line nr="181" mi="8" ci="0" mb="0" cb="0"/><line nr="189" mi="6" ci="0" mb="0" cb="0"/><line nr="197" mi="4" ci="0" mb="0" cb="0"/><line nr="205" mi="4" ci="0" mb="0" cb="0"/><line nr="213" mi="23" ci="0" mb="0" cb="0"/><line nr="215" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="627" covered="0"/><counter type="BRANCH" missed="22" covered="0"/><counter type="LINE" missed="53" covered="0"/><counter type="COMPLEXITY" missed="39" covered="0"/><counter type="METHOD" missed="28" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="BigComplex.kt"><line nr="41" mi="8" ci="0" mb="0" cb="0"/><line nr="43" mi="7" ci="0" mb="0" cb="0"/><line nr="44" mi="2" ci="0" mb="0" cb="0"/><line nr="45" mi="2" ci="0" mb="0" cb="0"/><line nr="46" mi="2" ci="0" mb="0" cb="0"/><line nr="48" mi="29" ci="0" mb="0" cb="0"/><line nr="58" mi="33" ci="0" mb="0" cb="0"/><line nr="68" mi="12" ci="0" mb="0" cb="0"/><line nr="69" mi="9" ci="0" mb="0" cb="0"/><line nr="70" mi="9" ci="0" mb="0" cb="0"/><line nr="71" mi="2" ci="0" mb="0" cb="0"/><line nr="81" mi="31" ci="0" mb="0" cb="0"/><line nr="91" mi="12" ci="0" mb="0" cb="0"/><line nr="92" mi="9" ci="0" mb="0" cb="0"/><line nr="93" mi="9" ci="0" mb="0" cb="0"/><line nr="94" mi="2" ci="0" mb="0" cb="0"/><line nr="104" mi="31" ci="0" mb="0" cb="0"/><line nr="112" mi="12" ci="0" mb="0" cb="0"/><line nr="113" mi="10" ci="0" mb="0" cb="0"/><line nr="114" mi="10" ci="0" mb="0" cb="0"/><line nr="115" mi="2" ci="0" mb="0" cb="0"/><line nr="125" mi="31" ci="0" mb="0" cb="0"/><line nr="133" mi="12" ci="0" mb="0" cb="0"/><line nr="134" mi="10" ci="0" mb="0" cb="0"/><line nr="135" mi="10" ci="0" mb="0" cb="0"/><line nr="136" mi="2" ci="0" mb="0" cb="0"/><line nr="146" mi="16" ci="0" mb="0" cb="0"/><line nr="147" mi="8" ci="0" mb="0" cb="0"/><line nr="148" mi="8" ci="0" mb="0" cb="0"/><line nr="149" mi="2" ci="0" mb="0" cb="0"/><line nr="158" mi="8" ci="0" mb="0" cb="0"/><line nr="160" mi="7" ci="0" mb="0" cb="0"/><line nr="162" mi="2" ci="0" mb="0" cb="0"/><line nr="163" mi="16" ci="0" mb="0" cb="0"/><line nr="164" mi="16" ci="0" mb="0" cb="0"/><line nr="165" mi="2" ci="0" mb="0" cb="0"/><line nr="167" mi="36" ci="0" mb="0" cb="0"/><line nr="174" mi="3" ci="0" mb="0" cb="0"/><line nr="175" mi="13" ci="0" mb="0" cb="0"/><line nr="176" mi="13" ci="0" mb="0" cb="0"/><line nr="177" mi="1" ci="0" mb="0" cb="0"/><line nr="179" mi="3" ci="0" mb="0" cb="0"/><line nr="180" mi="16" ci="0" mb="0" cb="0"/><line nr="181" mi="16" ci="0" mb="0" cb="0"/><line nr="182" mi="1" ci="0" mb="0" cb="0"/><line nr="191" mi="15" ci="0" mb="0" cb="0"/><line nr="192" mi="3" ci="0" mb="0" cb="0"/><line nr="193" mi="13" ci="0" mb="0" cb="0"/><line nr="194" mi="13" ci="0" mb="0" cb="0"/><line nr="195" mi="1" ci="0" mb="0" cb="0"/><line nr="197" mi="3" ci="0" mb="0" cb="0"/><line nr="198" mi="42" ci="0" mb="0" cb="0"/><line nr="199" mi="42" ci="0" mb="0" cb="0"/><line nr="200" mi="1" ci="0" mb="0" cb="0"/><line nr="208" mi="9" ci="0" mb="0" cb="0"/><line nr="209" mi="10" ci="0" mb="0" cb="0"/><line nr="210" mi="1" ci="0" mb="0" cb="0"/><line nr="211" mi="18" ci="0" mb="0" cb="0"/><line nr="212" mi="12" ci="0" mb="0" cb="0"/><line nr="216" mi="20" ci="0" mb="2" cb="0"/><line nr="217" mi="31" ci="0" mb="0" cb="0"/><line nr="218" mi="4" ci="0" mb="0" cb="0"/><line nr="219" mi="52" ci="0" mb="0" cb="0"/><line nr="220" mi="52" ci="0" mb="0" cb="0"/><line nr="231" mi="20" ci="0" mb="2" cb="0"/><line nr="232" mi="15" ci="0" mb="0" cb="0"/><line nr="233" mi="9" ci="0" mb="0" cb="0"/><line nr="234" mi="10" ci="0" mb="0" cb="0"/><line nr="235" mi="3" ci="0" mb="0" cb="0"/><line nr="236" mi="9" ci="0" mb="0" cb="0"/><line nr="237" mi="10" ci="0" mb="0" cb="0"/><line nr="238" mi="3" ci="0" mb="0" cb="0"/><line nr="239" mi="12" ci="0" mb="0" cb="0"/><line nr="242" mi="1" ci="0" mb="0" cb="0"/><line nr="243" mi="14" ci="0" mb="2" cb="0"/><line nr="244" mi="4" ci="0" mb="2" cb="0"/><line nr="245" mi="9" ci="0" mb="0" cb="0"/><line nr="246" mi="1" ci="0" mb="0" cb="0"/><line nr="253" mi="1" ci="0" mb="0" cb="0"/><line nr="254" mi="15" ci="0" mb="2" cb="0"/><line nr="255" mi="4" ci="0" mb="2" cb="0"/><line nr="256" mi="9" ci="0" mb="0" cb="0"/><line nr="257" mi="1" ci="0" mb="0" cb="0"/><line nr="259" mi="26" ci="0" mb="0" cb="0"/><line nr="267" mi="24" ci="0" mb="0" cb="0"/><line nr="270" mi="20" ci="0" mb="2" cb="0"/><line nr="271" mi="6" ci="0" mb="0" cb="0"/><line nr="281" mi="20" ci="0" mb="2" cb="0"/><line nr="282" mi="5" ci="0" mb="0" cb="0"/><line nr="285" mi="31" ci="0" mb="0" cb="0"/><line nr="293" mi="20" ci="0" mb="0" cb="0"/><line nr="295" mi="7" ci="0" mb="0" cb="0"/><line nr="302" mi="6" ci="0" mb="0" cb="0"/><line nr="304" mi="18" ci="0" mb="0" cb="0"/><line nr="311" mi="17" ci="0" mb="0" cb="0"/><line nr="314" mi="22" ci="0" mb="2" cb="0"/><line nr="315" mi="17" ci="0" mb="0" cb="0"/><line nr="316" mi="4" ci="0" mb="0" cb="0"/><line nr="317" mi="24" ci="0" mb="2" cb="0"/><line nr="327" mi="22" ci="0" mb="2" cb="0"/><line nr="328" mi="9" ci="0" mb="0" cb="0"/><line nr="329" mi="4" ci="0" mb="0" cb="0"/><line nr="330" mi="20" ci="0" mb="2" cb="0"/><line nr="334" mi="22" ci="0" mb="2" cb="0"/><line nr="335" mi="8" ci="0" mb="0" cb="0"/><line nr="345" mi="22" ci="0" mb="2" cb="0"/><line nr="346" mi="10" ci="0" mb="0" cb="0"/><line nr="350" mi="20" ci="0" mb="4" cb="0"/><line nr="359" mi="13" ci="0" mb="0" cb="0"/><line nr="367" mi="13" ci="0" mb="0" cb="0"/><line nr="375" mi="16" ci="0" mb="0" cb="0"/><line nr="383" mi="4" ci="0" mb="0" cb="0"/><line nr="391" mi="4" ci="0" mb="0" cb="0"/><line nr="399" mi="23" ci="0" mb="0" cb="0"/><line nr="401" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1561" covered="0"/><counter type="BRANCH" missed="32" covered="0"/><counter type="LINE" missed="115" covered="0"/><counter type="COMPLEXITY" missed="67" covered="0"/><counter type="METHOD" missed="51" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="BigPolarForm.kt"><line nr="42" mi="1" ci="0" mb="0" cb="0"/><line nr="45" mi="2" ci="0" mb="0" cb="0"/><line nr="46" mi="2" ci="0" mb="0" cb="0"/><line nr="47" mi="2" ci="0" mb="0" cb="0"/><line nr="54" mi="21" ci="0" mb="0" cb="0"/><line nr="65" mi="2" ci="0" mb="0" cb="0"/><line nr="66" mi="10" ci="0" mb="0" cb="0"/><line nr="67" mi="10" ci="0" mb="0" cb="0"/><line nr="68" mi="1" ci="0" mb="0" cb="0"/><line nr="71" mi="16" ci="0" mb="0" cb="0"/><line nr="72" mi="16" ci="0" mb="0" cb="0"/><line nr="73" mi="12" ci="0" mb="0" cb="0"/><line nr="82" mi="11" ci="0" mb="0" cb="0"/><line nr="83" mi="11" ci="0" mb="0" cb="0"/><line nr="84" mi="12" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="141" covered="0"/><counter type="LINE" missed="15" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="5" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="AbstractComplex.kt"><line nr="41" mi="1" ci="0" mb="0" cb="0"/><line nr="42" mi="6" ci="0" mb="0" cb="0"/><line nr="43" mi="6" ci="0" mb="0" cb="0"/><line nr="44" mi="2" ci="0" mb="0" cb="0"/><line nr="133" mi="4" ci="0" mb="0" cb="0"/><line nr="135" mi="4" ci="0" mb="0" cb="0"/><line nr="137" mi="4" ci="0" mb="0" cb="0"/><line nr="139" mi="4" ci="0" mb="0" cb="0"/><line nr="141" mi="4" ci="0" mb="0" cb="0"/><line nr="143" mi="4" ci="0" mb="0" cb="0"/><line nr="145" mi="5" ci="0" mb="0" cb="0"/><line nr="167" mi="8" ci="0" mb="2" cb="0"/><line nr="169" mi="4" ci="0" mb="0" cb="0"/><line nr="171" mi="4" ci="0" mb="0" cb="0"/><line nr="173" mi="4" ci="0" mb="0" cb="0"/><line nr="175" mi="4" ci="0" mb="0" cb="0"/><line nr="178" mi="2" ci="0" mb="0" cb="0"/><line nr="180" mi="3" ci="0" mb="0" cb="0"/><line nr="182" mi="3" ci="0" mb="0" cb="0"/><line nr="184" mi="3" ci="0" mb="0" cb="0"/><line nr="186" mi="16" ci="0" mb="0" cb="0"/><line nr="189" mi="5" ci="0" mb="2" cb="0"/><line nr="190" mi="5" ci="0" mb="2" cb="0"/><line nr="191" mi="18" ci="0" mb="4" cb="0"/><line nr="195" mi="17" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="161" covered="0"/><counter type="BRANCH" missed="10" covered="0"/><counter type="LINE" missed="25" covered="0"/><counter type="COMPLEXITY" missed="27" covered="0"/><counter type="METHOD" missed="22" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="Gaussian.kt"><line nr="39" mi="8" ci="0" mb="0" cb="0"/><line nr="41" mi="2" ci="0" mb="0" cb="0"/><line nr="42" mi="2" ci="0" mb="0" cb="0"/><line nr="43" mi="3" ci="0" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="46" mi="29" ci="0" mb="0" cb="0"/><line nr="56" mi="17" ci="0" mb="0" cb="0"/><line nr="59" mi="18" ci="0" mb="0" cb="0"/><line nr="61" mi="3" ci="0" mb="0" cb="0"/><line nr="62" mi="7" ci="0" mb="0" cb="0"/><line nr="63" mi="7" ci="0" mb="0" cb="0"/><line nr="64" mi="1" ci="0" mb="0" cb="0"/><line nr="66" mi="3" ci="0" mb="0" cb="0"/><line nr="67" mi="15" ci="0" mb="0" cb="0"/><line nr="68" mi="15" ci="0" mb="0" cb="0"/><line nr="69" mi="1" ci="0" mb="0" cb="0"/><line nr="72" mi="20" ci="0" mb="2" cb="0"/><line nr="73" mi="28" ci="0" mb="0" cb="0"/><line nr="74" mi="4" ci="0" mb="0" cb="0"/><line nr="75" mi="18" ci="0" mb="0" cb="0"/><line nr="76" mi="18" ci="0" mb="0" cb="0"/><line nr="80" mi="1" ci="0" mb="0" cb="0"/><line nr="81" mi="15" ci="0" mb="2" cb="0"/><line nr="82" mi="4" ci="0" mb="2" cb="0"/><line nr="83" mi="10" ci="0" mb="0" cb="0"/><line nr="84" mi="1" ci="0" mb="0" cb="0"/><line nr="86" mi="12" ci="0" mb="0" cb="0"/><line nr="89" mi="20" ci="0" mb="2" cb="0"/><line nr="90" mi="6" ci="0" mb="0" cb="0"/><line nr="93" mi="17" ci="0" mb="0" cb="0"/><line nr="95" mi="11" ci="0" mb="0" cb="0"/><line nr="97" mi="11" ci="0" mb="0" cb="0"/><line nr="100" mi="22" ci="0" mb="2" cb="0"/><line nr="101" mi="9" ci="0" mb="0" cb="0"/><line nr="102" mi="5" ci="0" mb="0" cb="0"/><line nr="103" mi="12" ci="0" mb="2" cb="0"/><line nr="107" mi="22" ci="0" mb="2" cb="0"/><line nr="108" mi="10" ci="0" mb="0" cb="0"/><line nr="118" mi="22" ci="0" mb="2" cb="0"/><line nr="119" mi="26" ci="0" mb="0" cb="0"/><line nr="129" mi="22" ci="0" mb="2" cb="0"/><line nr="130" mi="28" ci="0" mb="0" cb="0"/><line nr="138" mi="10" ci="0" mb="0" cb="0"/><line nr="145" mi="10" ci="0" mb="0" cb="0"/><line nr="152" mi="10" ci="0" mb="0" cb="0"/><line nr="155" mi="20" ci="0" mb="4" cb="0"/><line nr="164" mi="8" ci="0" mb="0" cb="0"/><line nr="172" mi="8" ci="0" mb="0" cb="0"/><line nr="180" mi="6" ci="0" mb="0" cb="0"/><line nr="188" mi="4" ci="0" mb="0" cb="0"/><line nr="196" mi="4" ci="0" mb="0" cb="0"/><line nr="204" mi="23" ci="0" mb="0" cb="0"/><line nr="206" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="630" covered="0"/><counter type="BRANCH" missed="22" covered="0"/><counter type="LINE" missed="53" covered="0"/><counter type="COMPLEXITY" missed="36" covered="0"/><counter type="METHOD" missed="25" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="PolarForm.kt"><line nr="41" mi="1" ci="0" mb="0" cb="0"/><line nr="44" mi="2" ci="0" mb="0" cb="0"/><line nr="45" mi="3" ci="0" mb="0" cb="0"/><line nr="46" mi="3" ci="0" mb="0" cb="0"/><line nr="53" mi="32" ci="0" mb="0" cb="0"/><line nr="60" mi="28" ci="0" mb="0" cb="0"/><line nr="67" mi="3" ci="0" mb="0" cb="0"/><line nr="68" mi="13" ci="0" mb="0" cb="0"/><line nr="69" mi="13" ci="0" mb="0" cb="0"/><line nr="70" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="102" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="BigGaussian.kt"><line nr="41" mi="8" ci="0" mb="0" cb="0"/><line nr="43" mi="7" ci="0" mb="0" cb="0"/><line nr="44" mi="2" ci="0" mb="0" cb="0"/><line nr="45" mi="2" ci="0" mb="0" cb="0"/><line nr="46" mi="2" ci="0" mb="0" cb="0"/><line nr="48" mi="29" ci="0" mb="0" cb="0"/><line nr="58" mi="33" ci="0" mb="0" cb="0"/><line nr="68" mi="31" ci="0" mb="0" cb="0"/><line nr="71" mi="36" ci="0" mb="0" cb="0"/><line nr="73" mi="3" ci="0" mb="0" cb="0"/><line nr="74" mi="16" ci="0" mb="0" cb="0"/><line nr="75" mi="16" ci="0" mb="0" cb="0"/><line nr="76" mi="1" ci="0" mb="0" cb="0"/><line nr="78" mi="3" ci="0" mb="0" cb="0"/><line nr="79" mi="42" ci="0" mb="0" cb="0"/><line nr="80" mi="42" ci="0" mb="0" cb="0"/><line nr="81" mi="1" ci="0" mb="0" cb="0"/><line nr="84" mi="20" ci="0" mb="2" cb="0"/><line nr="85" mi="38" ci="0" mb="0" cb="0"/><line nr="86" mi="4" ci="0" mb="0" cb="0"/><line nr="87" mi="59" ci="0" mb="0" cb="0"/><line nr="88" mi="59" ci="0" mb="0" cb="0"/><line nr="99" mi="20" ci="0" mb="2" cb="0"/><line nr="100" mi="46" ci="0" mb="0" cb="0"/><line nr="101" mi="1" ci="0" mb="0" cb="0"/><line nr="102" mi="67" ci="0" mb="0" cb="0"/><line nr="103" mi="1" ci="0" mb="0" cb="0"/><line nr="104" mi="67" ci="0" mb="0" cb="0"/><line nr="105" mi="6" ci="0" mb="0" cb="0"/><line nr="108" mi="1" ci="0" mb="0" cb="0"/><line nr="109" mi="15" ci="0" mb="2" cb="0"/><line nr="110" mi="4" ci="0" mb="2" cb="0"/><line nr="111" mi="10" ci="0" mb="0" cb="0"/><line nr="112" mi="1" ci="0" mb="0" cb="0"/><line nr="119" mi="1" ci="0" mb="0" cb="0"/><line nr="120" mi="17" ci="0" mb="2" cb="0"/><line nr="121" mi="4" ci="0" mb="2" cb="0"/><line nr="122" mi="10" ci="0" mb="0" cb="0"/><line nr="123" mi="1" ci="0" mb="0" cb="0"/><line nr="125" mi="26" ci="0" mb="0" cb="0"/><line nr="128" mi="20" ci="0" mb="2" cb="0"/><line nr="129" mi="6" ci="0" mb="0" cb="0"/><line nr="139" mi="20" ci="0" mb="2" cb="0"/><line nr="140" mi="5" ci="0" mb="0" cb="0"/><line nr="143" mi="31" ci="0" mb="0" cb="0"/><line nr="145" mi="7" ci="0" mb="0" cb="0"/><line nr="152" mi="5" ci="0" mb="0" cb="0"/><line nr="159" mi="5" ci="0" mb="0" cb="0"/><line nr="161" mi="18" ci="0" mb="0" cb="0"/><line nr="164" mi="22" ci="0" mb="2" cb="0"/><line nr="165" mi="24" ci="0" mb="0" cb="0"/><line nr="166" mi="6" ci="0" mb="0" cb="0"/><line nr="167" mi="18" ci="0" mb="2" cb="0"/><line nr="177" mi="22" ci="0" mb="2" cb="0"/><line nr="178" mi="24" ci="0" mb="0" cb="0"/><line nr="179" mi="8" ci="0" mb="0" cb="0"/><line nr="180" mi="18" ci="0" mb="2" cb="0"/><line nr="184" mi="22" ci="0" mb="2" cb="0"/><line nr="185" mi="8" ci="0" mb="0" cb="0"/><line nr="195" mi="22" ci="0" mb="2" cb="0"/><line nr="196" mi="11" ci="0" mb="0" cb="0"/><line nr="204" mi="24" ci="0" mb="0" cb="0"/><line nr="211" mi="3" ci="0" mb="0" cb="0"/><line nr="212" mi="18" ci="0" mb="0" cb="0"/><line nr="213" mi="18" ci="0" mb="0" cb="0"/><line nr="214" mi="1" ci="0" mb="0" cb="0"/><line nr="217" mi="20" ci="0" mb="4" cb="0"/><line nr="226" mi="13" ci="0" mb="0" cb="0"/><line nr="234" mi="13" ci="0" mb="0" cb="0"/><line nr="242" mi="16" ci="0" mb="0" cb="0"/><line nr="250" mi="4" ci="0" mb="0" cb="0"/><line nr="258" mi="4" ci="0" mb="0" cb="0"/><line nr="266" mi="23" ci="0" mb="0" cb="0"/><line nr="268" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="1280" covered="0"/><counter type="BRANCH" missed="32" covered="0"/><counter type="LINE" missed="74" covered="0"/><counter type="COMPLEXITY" missed="47" covered="0"/><counter type="METHOD" missed="31" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="4614" covered="0"/><counter type="BRANCH" missed="132" covered="0"/><counter type="LINE" missed="356" covered="0"/><counter type="COMPLEXITY" missed="240" covered="0"/><counter type="METHOD" missed="174" covered="0"/><counter type="CLASS" missed="12" covered="0"/></package><package name="io/github/ltennstedt/finnmath/linear/field"><class name="io/github/ltennstedt/finnmath/linear/field/BigDecimalField$vectorConstructor$1" sourcefilename="BigDecimalField.kt"><method name="invoke" desc="(Ljava/util/Set;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="47"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigComplexField$vectorConstructor$1" sourcefilename="BigComplexField.kt"><method name="invoke" desc="(Ljava/util/Set;)Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="47"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/GaussianField" sourcefilename="GaussianField.kt"><method name="getAddition" desc="()Lkotlin/jvm/functions/Function2;" line="32"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSubtraction" desc="()Lkotlin/jvm/functions/Function2;" line="34"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMultiplication" desc="()Lkotlin/jvm/functions/Function2;" line="36"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDivision" desc="()Lkotlin/jvm/functions/Function2;" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNegation" desc="()Lkotlin/jvm/functions/Function1;" line="40"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEqualityByComparing" desc="()Lkotlin/jvm/functions/Function2;" line="42"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getZero" desc="()Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="44"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOne" desc="()Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="46"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="48"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigDecimalField$equalityByComparing$1" sourcefilename="BigDecimalField.kt"><method name="invoke" desc="(Ljava/math/BigDecimal;Ljava/math/BigDecimal;)Z" line="41"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/LongField$negation$1" sourcefilename="LongField.kt"><method name="invoke" desc="(J)J" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigDecimalField" sourcefilename="BigDecimalField.kt"><method name="getAddition" desc="()Lkotlin/jvm/functions/Function2;" line="31"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSubtraction" desc="()Lkotlin/jvm/functions/Function2;" line="33"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMultiplication" desc="()Lkotlin/jvm/functions/Function2;" line="35"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDivision" desc="()Lkotlin/jvm/functions/Function2;" line="37"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNegation" desc="()Lkotlin/jvm/functions/Function1;" line="39"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEqualityByComparing" desc="()Lkotlin/jvm/functions/Function2;" line="41"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getZero" desc="()Ljava/math/BigDecimal;" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOne" desc="()Ljava/math/BigDecimal;" line="45"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="47"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/ComplexField$vectorConstructor$1" sourcefilename="ComplexField.kt"><method name="invoke" desc="(Ljava/util/Set;)Lio/github/ltennstedt/finnmath/linear/vector/ComplexVector;" line="47"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigComplexField" sourcefilename="BigComplexField.kt"><method name="getAddition" desc="()Lkotlin/jvm/functions/Function2;" line="31"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSubtraction" desc="()Lkotlin/jvm/functions/Function2;" line="33"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMultiplication" desc="()Lkotlin/jvm/functions/Function2;" line="35"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDivision" desc="()Lkotlin/jvm/functions/Function2;" line="37"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNegation" desc="()Lkotlin/jvm/functions/Function1;" line="39"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEqualityByComparing" desc="()Lkotlin/jvm/functions/Function2;" line="41"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getZero" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="43"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOne" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="45"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="47"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigIntegerField$vectorConstructor$1" sourcefilename="BigIntegerField.kt"><method name="invoke" desc="(Ljava/util/Set;)Lio/github/ltennstedt/finnmath/linear/vector/BigIntegerVector;" line="48"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigIntegerField$equalityByComparing$1" sourcefilename="BigIntegerField.kt"><method name="invoke" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Z" line="42"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/GaussianField$vectorConstructor$1" sourcefilename="GaussianField.kt"><method name="invoke" desc="(Ljava/util/Set;)Lio/github/ltennstedt/finnmath/linear/vector/GaussianVector;" line="48"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/Field" sourcefilename="Field.kt"/><class name="io/github/ltennstedt/finnmath/linear/field/LongField$subtraction$1" sourcefilename="LongField.kt"><method name="invoke" desc="(JJ)J" line="32"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigGaussianField" sourcefilename="BigGaussianField.kt"><method name="getAddition" desc="()Lkotlin/jvm/functions/Function2;" line="32"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSubtraction" desc="()Lkotlin/jvm/functions/Function2;" line="34"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMultiplication" desc="()Lkotlin/jvm/functions/Function2;" line="36"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDivision" desc="()Lkotlin/jvm/functions/Function2;" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNegation" desc="()Lkotlin/jvm/functions/Function1;" line="40"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEqualityByComparing" desc="()Lkotlin/jvm/functions/Function2;" line="42"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getZero" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="44"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOne" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="46"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="48"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/LongField$multiplication$1" sourcefilename="LongField.kt"><method name="invoke" desc="(JJ)J" line="34"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/DoubleField$addition$1" sourcefilename="DoubleField.kt"><method name="invoke" desc="(DD)D" line="30"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigGaussianField$vectorConstructor$1" sourcefilename="BigGaussianField.kt"><method name="invoke" desc="(Ljava/util/Set;)Lio/github/ltennstedt/finnmath/linear/vector/BigGaussianVector;" line="48"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/LongField" sourcefilename="LongField.kt"><method name="getAddition" desc="()Lkotlin/jvm/functions/Function2;" line="30"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSubtraction" desc="()Lkotlin/jvm/functions/Function2;" line="32"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMultiplication" desc="()Lkotlin/jvm/functions/Function2;" line="34"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDivision" desc="()Lkotlin/jvm/functions/Function2;" line="36"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNegation" desc="()Lkotlin/jvm/functions/Function1;" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEqualityByComparing" desc="()Lkotlin/jvm/functions/Function2;" line="40"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getZero" desc="()Ljava/lang/Long;" line="42"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOne" desc="()Ljava/lang/Long;" line="44"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="46"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="24" covered="3"/><counter type="LINE" missed="8" covered="1"/><counter type="COMPLEXITY" missed="8" covered="1"/><counter type="METHOD" missed="8" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/field/DoubleField$negation$1" sourcefilename="DoubleField.kt"><method name="invoke" desc="(D)D" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/DoubleField$subtraction$1" sourcefilename="DoubleField.kt"><method name="invoke" desc="(DD)D" line="32"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/LongField$vectorConstructor$1" sourcefilename="LongField.kt"><method name="invoke" desc="(Ljava/util/Set;)Lio/github/ltennstedt/finnmath/linear/vector/LongVector;" line="46"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/field/DoubleField$equalityByComparing$1" sourcefilename="DoubleField.kt"><method name="invoke" desc="(DD)Z" line="40"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/DoubleField$multiplication$1" sourcefilename="DoubleField.kt"><method name="invoke" desc="(DD)D" line="34"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/DoubleField$vectorConstructor$1" sourcefilename="DoubleField.kt"><method name="invoke" desc="(Ljava/util/Set;)Lio/github/ltennstedt/finnmath/linear/vector/DoubleVector;" line="46"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigIntegerField" sourcefilename="BigIntegerField.kt"><method name="getAddition" desc="()Lkotlin/jvm/functions/Function2;" line="32"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSubtraction" desc="()Lkotlin/jvm/functions/Function2;" line="34"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMultiplication" desc="()Lkotlin/jvm/functions/Function2;" line="36"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDivision" desc="()Lkotlin/jvm/functions/Function2;" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNegation" desc="()Lkotlin/jvm/functions/Function1;" line="40"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEqualityByComparing" desc="()Lkotlin/jvm/functions/Function2;" line="42"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getZero" desc="()Ljava/math/BigInteger;" line="44"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOne" desc="()Ljava/math/BigInteger;" line="46"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="48"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/LongField$addition$1" sourcefilename="LongField.kt"><method name="invoke" desc="(JJ)J" line="30"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/LongField$equalityByComparing$1" sourcefilename="LongField.kt"><method name="invoke" desc="(JJ)Z" line="40"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/ComplexField" sourcefilename="ComplexField.kt"><method name="getAddition" desc="()Lkotlin/jvm/functions/Function2;" line="31"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSubtraction" desc="()Lkotlin/jvm/functions/Function2;" line="33"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMultiplication" desc="()Lkotlin/jvm/functions/Function2;" line="35"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDivision" desc="()Lkotlin/jvm/functions/Function2;" line="37"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNegation" desc="()Lkotlin/jvm/functions/Function1;" line="39"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEqualityByComparing" desc="()Lkotlin/jvm/functions/Function2;" line="41"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getZero" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="43"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOne" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="45"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="47"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/LongField$division$1" sourcefilename="LongField.kt"><method name="invoke" desc="(JJ)D" line="36"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/DoubleField$division$1" sourcefilename="DoubleField.kt"><method name="invoke" desc="(DD)D" line="36"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/DoubleField" sourcefilename="DoubleField.kt"><method name="getAddition" desc="()Lkotlin/jvm/functions/Function2;" line="30"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSubtraction" desc="()Lkotlin/jvm/functions/Function2;" line="32"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMultiplication" desc="()Lkotlin/jvm/functions/Function2;" line="34"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getDivision" desc="()Lkotlin/jvm/functions/Function2;" line="36"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getNegation" desc="()Lkotlin/jvm/functions/Function1;" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getEqualityByComparing" desc="()Lkotlin/jvm/functions/Function2;" line="40"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getZero" desc="()Ljava/lang/Double;" line="42"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getOne" desc="()Ljava/lang/Double;" line="44"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getVectorConstructor" desc="()Lkotlin/jvm/functions/Function1;" line="46"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="27" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/field/BigIntegerField$division$1" sourcefilename="BigIntegerField.kt"><method name="invoke" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigDecimal;" line="38"><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="34" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="DoubleField.kt"><line nr="30" mi="7" ci="0" mb="0" cb="0"/><line nr="32" mi="7" ci="0" mb="0" cb="0"/><line nr="34" mi="7" ci="0" mb="0" cb="0"/><line nr="36" mi="7" ci="0" mb="0" cb="0"/><line nr="38" mi="6" ci="0" mb="0" cb="0"/><line nr="40" mi="11" ci="0" mb="2" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="46" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="62" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="17" covered="0"/><counter type="METHOD" missed="16" covered="0"/><counter type="CLASS" missed="8" covered="0"/></sourcefile><sourcefile name="BigDecimalField.kt"><line nr="31" mi="3" ci="0" mb="0" cb="0"/><line nr="33" mi="3" ci="0" mb="0" cb="0"/><line nr="35" mi="3" ci="0" mb="0" cb="0"/><line nr="37" mi="3" ci="0" mb="0" cb="0"/><line nr="39" mi="3" ci="0" mb="0" cb="0"/><line nr="41" mi="11" ci="0" mb="2" cb="0"/><line nr="43" mi="7" ci="0" mb="0" cb="0"/><line nr="45" mi="7" ci="0" mb="0" cb="0"/><line nr="47" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="57" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="12" covered="0"/><counter type="METHOD" missed="11" covered="0"/><counter type="CLASS" missed="3" covered="0"/></sourcefile><sourcefile name="ComplexField.kt"><line nr="31" mi="3" ci="0" mb="0" cb="0"/><line nr="33" mi="3" ci="0" mb="0" cb="0"/><line nr="35" mi="3" ci="0" mb="0" cb="0"/><line nr="37" mi="3" ci="0" mb="0" cb="0"/><line nr="39" mi="3" ci="0" mb="0" cb="0"/><line nr="41" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="2" ci="0" mb="0" cb="0"/><line nr="45" mi="2" ci="0" mb="0" cb="0"/><line nr="47" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="10" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="BigComplexField.kt"><line nr="31" mi="3" ci="0" mb="0" cb="0"/><line nr="33" mi="3" ci="0" mb="0" cb="0"/><line nr="35" mi="3" ci="0" mb="0" cb="0"/><line nr="37" mi="3" ci="0" mb="0" cb="0"/><line nr="39" mi="3" ci="0" mb="0" cb="0"/><line nr="41" mi="3" ci="0" mb="0" cb="0"/><line nr="43" mi="2" ci="0" mb="0" cb="0"/><line nr="45" mi="2" ci="0" mb="0" cb="0"/><line nr="47" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="10" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="GaussianField.kt"><line nr="32" mi="3" ci="0" mb="0" cb="0"/><line nr="34" mi="3" ci="0" mb="0" cb="0"/><line nr="36" mi="3" ci="0" mb="0" cb="0"/><line nr="38" mi="3" ci="0" mb="0" cb="0"/><line nr="40" mi="3" ci="0" mb="0" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="44" mi="2" ci="0" mb="0" cb="0"/><line nr="46" mi="2" ci="0" mb="0" cb="0"/><line nr="48" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="10" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="BigGaussianField.kt"><line nr="32" mi="3" ci="0" mb="0" cb="0"/><line nr="34" mi="3" ci="0" mb="0" cb="0"/><line nr="36" mi="3" ci="0" mb="0" cb="0"/><line nr="38" mi="3" ci="0" mb="0" cb="0"/><line nr="40" mi="3" ci="0" mb="0" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="44" mi="2" ci="0" mb="0" cb="0"/><line nr="46" mi="2" ci="0" mb="0" cb="0"/><line nr="48" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="10" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="BigIntegerField.kt"><line nr="32" mi="3" ci="0" mb="0" cb="0"/><line nr="34" mi="3" ci="0" mb="0" cb="0"/><line nr="36" mi="3" ci="0" mb="0" cb="0"/><line nr="38" mi="31" ci="0" mb="0" cb="0"/><line nr="40" mi="3" ci="0" mb="0" cb="0"/><line nr="42" mi="11" ci="0" mb="2" cb="0"/><line nr="44" mi="7" ci="0" mb="0" cb="0"/><line nr="46" mi="7" ci="0" mb="0" cb="0"/><line nr="48" mi="8" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="91" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="13" covered="0"/><counter type="METHOD" missed="12" covered="0"/><counter type="CLASS" missed="4" covered="0"/></sourcefile><sourcefile name="Field.kt"/><sourcefile name="LongField.kt"><line nr="30" mi="7" ci="0" mb="0" cb="0"/><line nr="32" mi="7" ci="0" mb="0" cb="0"/><line nr="34" mi="7" ci="0" mb="0" cb="0"/><line nr="36" mi="9" ci="0" mb="0" cb="0"/><line nr="38" mi="6" ci="0" mb="0" cb="0"/><line nr="40" mi="11" ci="0" mb="2" cb="0"/><line nr="42" mi="3" ci="0" mb="0" cb="0"/><line nr="44" mi="3" ci="0" mb="0" cb="0"/><line nr="46" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="53" covered="11"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="8" covered="1"/><counter type="COMPLEXITY" missed="15" covered="2"/><counter type="METHOD" missed="14" covered="2"/><counter type="CLASS" missed="6" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="395" covered="11"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="71" covered="1"/><counter type="COMPLEXITY" missed="97" covered="2"/><counter type="METHOD" missed="93" covered="2"/><counter type="CLASS" missed="29" covered="2"/></package><package name="io/github/ltennstedt/finnmath/linear/vector"><class name="io/github/ltennstedt/finnmath/linear/vector/ComplexVector$toBigComplexVector$1" sourcefilename="ComplexVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="65"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toBigDecimalVector$2$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(I)Ljava/math/BigDecimal;" line="100"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/VectorEntry$special$$inlined$compareBy$1" sourcefilename="Comparisons.kt"><method name="compare" desc="(Ljava/lang/Object;Ljava/lang/Object;)I" line="102"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector" sourcefilename="LongVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="52"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="58"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/lang/Double;" line="60"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Ljava/lang/Long;" line="62"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/lang/Double;" line="64"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/lang/Double;" line="66"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toDoubleVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/DoubleVector;" line="73"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigIntegerVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigIntegerVector;" line="83"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigDecimalVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="90"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigDecimalVector" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="99"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toGaussianVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/GaussianVector;" line="108"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/ComplexVector;" line="117"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigGaussianVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigGaussianVector;" line="126"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="135"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="168" covered="7"/><counter type="LINE" missed="20" covered="3"/><counter type="COMPLEXITY" missed="13" covered="1"/><counter type="METHOD" missed="13" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigComplexVector$2$1" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="131"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector" sourcefilename="DoubleVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="47"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="53"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/lang/Double;" line="55"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Ljava/lang/Double;" line="57"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/lang/Double;" line="59"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/lang/Double;" line="61"><counter type="INSTRUCTION" missed="26" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigDecimalVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="68"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigDecimalVector" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="77"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/ComplexVector;" line="86"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="95"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="113" covered="0"/><counter type="LINE" missed="16" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="10" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$toComplexVector$1$1" sourcefilename="DoubleVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="87"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$toBigDecimalVector$2$1" sourcefilename="DoubleVector.kt"><method name="invoke" desc="(I)Ljava/math/BigDecimal;" line="78"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toGaussianVector$1$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="109"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$Companion" sourcefilename="DoubleVector.kt"><method name="builder" desc="(I)Lio/github/ltennstedt/finnmath/linear/builder/DoubleVectorJavaBuilder;" line="106"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/AbstractVector" sourcefilename="AbstractVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="41"><counter type="INSTRUCTION" missed="36" covered="65"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="1" covered="10"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getEntries" desc="()Ljava/util/Set;" line="44"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getIndices" desc="()Ljava/util/Set;" line="51"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getElements" desc="()Ljava/util/List;" line="58"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSize" desc="()I" line="66"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="90"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="101"><counter type="INSTRUCTION" missed="78" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dotProduct" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Ljava/lang/Number;" line="114"><counter type="INSTRUCTION" missed="73" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Ljava/lang/Number;)Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="124"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="131"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Z" line="140"><counter type="INSTRUCTION" missed="53" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabDistance" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Ljava/lang/Number;" line="179"><counter type="INSTRUCTION" missed="45" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanDistance" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Ljava/lang/Number;" line="190"><counter type="INSTRUCTION" missed="45" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxDistance" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Ljava/lang/Number;" line="201"><counter type="INSTRUCTION" missed="45" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="get" desc="(I)Ljava/lang/Number;" line="212"><counter type="INSTRUCTION" missed="24" covered="21"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="entry" desc="(I)Lio/github/ltennstedt/finnmath/linear/vector/VectorEntry;" line="223"><counter type="INSTRUCTION" missed="24" covered="31"/><counter type="BRANCH" missed="3" covered="7"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="plus" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="227"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="minus" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="229"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="times" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Ljava/lang/Number;" line="231"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="times" desc="(Ljava/lang/Number;)Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="233"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unaryPlus" desc="()Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="236"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unaryMinus" desc="()Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;" line="238"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="contains" desc="(Ljava/lang/Number;)Z" line="245"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equalsByComparing" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Z" line="254"><counter type="INSTRUCTION" missed="66" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="doesNotEqualByComparing" desc="(Lio/github/ltennstedt/finnmath/linear/vector/AbstractVector;)Z" line="264"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hashCode" desc="()I" line="266"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="269"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toString" desc="()Ljava/lang/String;" line="274"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="58"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="719" covered="139"/><counter type="BRANCH" missed="49" covered="13"/><counter type="LINE" missed="33" covered="15"/><counter type="COMPLEXITY" missed="51" covered="9"/><counter type="METHOD" missed="22" covered="7"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/GaussianVector$toBigComplexVector$1" sourcefilename="GaussianVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="86"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$toBigDecimalVector$2" sourcefilename="DoubleVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilder;)V" line="78"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$toBigDecimalVector$1" sourcefilename="DoubleVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilder;)V" line="69"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigGaussianVector$toBigComplexVector$2" sourcefilename="BigGaussianVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="128"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigGaussianVector$toBigComplexVector$1" sourcefilename="BigGaussianVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="119"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$Companion" sourcefilename="BigIntegerVector.kt"><method name="builder" desc="(I)Lio/github/ltennstedt/finnmath/linear/builder/BigIntegerVectorJavaBuilder;" line="141"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/VectorEntry$Companion" sourcefilename="VectorEntry.kt"/><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toBigGaussianVector$1$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="127"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$toBigComplexVector$1" sourcefilename="DoubleVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="96"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/AbstractVector$elements$2" sourcefilename="AbstractVector.kt"><method name="invoke" desc="()Ljava/util/List;" line="58"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigGaussianVector$toBigComplexVector$2$1" sourcefilename="BigGaussianVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="128"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/GaussianVector$toBigComplexVector$1$1" sourcefilename="GaussianVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="86"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/AbstractVector$Companion" sourcefilename="AbstractVector.kt"/><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toComplexVector$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/ComplexVectorBuilder;)V" line="118"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toBigGaussianVector$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigGaussianVectorBuilder;)V" line="127"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/GaussianVector$toBigGaussianVector$1$1" sourcefilename="GaussianVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="77"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toComplexVector$1$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="118"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/GaussianVector$toComplexVector$1" sourcefilename="GaussianVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/ComplexVectorBuilder;)V" line="68"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/AbstractVector$indices$2" sourcefilename="AbstractVector.kt"><method name="invoke" desc="()Ljava/util/SortedSet;" line="51"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigGaussianVector$1" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigGaussianVectorBuilder;)V" line="113"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigGaussianVector$toBigComplexVector$1$1" sourcefilename="BigGaussianVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="119"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toDoubleVector$1$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(I)D" line="74"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/ComplexVector" sourcefilename="ComplexVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="49"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/lang/Double;" line="51"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="53"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/lang/Double;" line="55"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/lang/Double;" line="57"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="64"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="108" covered="0"/><counter type="LINE" missed="10" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="7" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toGaussianVector$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/GaussianVectorBuilder;)V" line="109"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/GaussianVector$Companion" sourcefilename="GaussianVector.kt"><method name="builder" desc="(I)Lio/github/ltennstedt/finnmath/linear/builder/GaussianVectorJavaBuilder;" line="96"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigGaussianVector$1$1" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="113"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector" sourcefilename="BigIntegerVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="48"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="54"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="56"><counter type="INSTRUCTION" missed="50" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="64"><counter type="INSTRUCTION" missed="61" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigInteger;" line="66"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="68"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="76"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="78"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="85"><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigDecimalVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="94"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigDecimalVector" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="103"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigGaussianVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigGaussianVector;" line="112"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="121"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplexVector" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="130"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="283" covered="0"/><counter type="LINE" missed="23" covered="0"/><counter type="COMPLEXITY" missed="14" covered="0"/><counter type="METHOD" missed="14" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/GaussianVector" sourcefilename="GaussianVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="46"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="52"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/lang/Double;" line="54"><counter type="INSTRUCTION" missed="24" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Lio/github/ltennstedt/finnmath/number/complex/Gaussian;" line="56"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/lang/Double;" line="58"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/lang/Double;" line="60"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/ComplexVector;" line="67"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigGaussianVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigGaussianVector;" line="76"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="85"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="122" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="9" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$Companion" sourcefilename="LongVector.kt"><method name="builder" desc="(I)Lio/github/ltennstedt/finnmath/linear/builder/LongVectorJavaBuilder;" line="146"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigDecimalVector$1$1" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(I)Ljava/math/BigDecimal;" line="95"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/GaussianVector$toComplexVector$1$1" sourcefilename="GaussianVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/Complex;" line="68"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigGaussianVector" sourcefilename="BigGaussianVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="46"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="52"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="54"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="61"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="69"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigGaussian;" line="72"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="75"><counter type="INSTRUCTION" missed="49" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="82"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="91"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="95"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="103"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Ljava/math/BigDecimal;" line="111"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplexVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="118"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigComplexVector" desc="(Lio/github/ltennstedt/finnmath/FinnmathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="127"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="306" covered="0"/><counter type="LINE" missed="24" covered="0"/><counter type="COMPLEXITY" missed="14" covered="0"/><counter type="METHOD" missed="14" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toBigDecimalVector$2" sourcefilename="LongVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilder;)V" line="100"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toBigDecimalVector$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilder;)V" line="91"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigDecimalVector$toBigDecimalVector$1$1" sourcefilename="BigDecimalVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="166"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigComplexVector" sourcefilename="BigComplexVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="43"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="49"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="58"><counter type="INSTRUCTION" missed="82" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="71"><counter type="INSTRUCTION" missed="82" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dotProduct" desc="(Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="84"><counter type="INSTRUCTION" missed="96" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Lio/github/ltennstedt/finnmath/number/complex/BigComplex;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="96"><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="105"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;Ljava/math/MathContext;)Z" line="114"><counter type="INSTRUCTION" missed="79" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="120"><counter type="INSTRUCTION" missed="29" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="127"><counter type="INSTRUCTION" missed="31" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="130"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="132"><counter type="INSTRUCTION" missed="49" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="139"><counter type="INSTRUCTION" missed="36" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="143"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="151"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="592" covered="0"/><counter type="BRANCH" missed="16" covered="0"/><counter type="LINE" missed="33" covered="0"/><counter type="COMPLEXITY" missed="23" covered="0"/><counter type="METHOD" missed="15" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigDecimalVector$2$1" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(I)Ljava/math/BigDecimal;" line="104"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/GaussianVector$toBigGaussianVector$1" sourcefilename="GaussianVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigGaussianVectorBuilder;)V" line="77"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigComplexVector$Companion" sourcefilename="BigComplexVector.kt"><method name="builder" desc="(I)Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorJavaBuilder;" line="160"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigDecimalVector$toBigDecimalVector$1" sourcefilename="BigDecimalVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="166"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$toComplexVector$1" sourcefilename="DoubleVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/ComplexVectorBuilder;)V" line="87"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/ComplexVector$Companion" sourcefilename="ComplexVector.kt"><method name="builder" desc="(I)Lio/github/ltennstedt/finnmath/linear/builder/ComplexVectorJavaBuilder;" line="75"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$toBigComplexVector$1$1" sourcefilename="DoubleVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="96"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigDecimalVector$1" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilder;)V" line="95"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/VectorEntry" sourcefilename="VectorEntry.kt"><method name="&lt;init&gt;" desc="(ILjava/lang/Number;)V" line="35"><counter type="INSTRUCTION" missed="14" covered="26"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getIndex" desc="()I" line="38"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getElement" desc="()Ljava/lang/Number;" line="38"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="compareTo" desc="(Lio/github/ltennstedt/finnmath/linear/vector/VectorEntry;)I" line="43"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="52"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="14" covered="53"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigDecimalVector$2" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorBuilder;)V" line="104"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toBigComplexVector$1$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="136"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toBigDecimalVector$1$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(I)Ljava/math/BigDecimal;" line="91"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toBigComplexVector$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="136"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigComplexVector$2" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="131"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigComplexVector$1" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/BigComplexVectorBuilder;)V" line="122"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/ComplexVector$toBigComplexVector$1$1" sourcefilename="ComplexVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="65"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigIntegerVector$toBigComplexVector$1$1" sourcefilename="BigIntegerVector.kt"><method name="invoke" desc="(I)Lio/github/ltennstedt/finnmath/number/complex/BigComplex;" line="122"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigDecimalVector" sourcefilename="BigDecimalVector.kt"><method name="&lt;init&gt;" desc="(Ljava/util/Set;)V" line="44"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getField" desc="()Lio/github/ltennstedt/finnmath/linear/field/Field;" line="50"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="59"><counter type="INSTRUCTION" missed="82" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="72"><counter type="INSTRUCTION" missed="82" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dotProduct" desc="(Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="85"><counter type="INSTRUCTION" missed="102" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="scalarMultiply" desc="(Ljava/math/BigDecimal;Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="97"><counter type="INSTRUCTION" missed="42" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="(Ljava/math/MathContext;)Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;" line="107"><counter type="INSTRUCTION" missed="15" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="orthogonalTo" desc="(Lio/github/ltennstedt/finnmath/linear/vector/BigDecimalVector;Ljava/math/MathContext;)Z" line="116"><counter type="INSTRUCTION" missed="83" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="()Ljava/math/BigDecimal;" line="122"><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="taxicabNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="130"><counter type="INSTRUCTION" missed="32" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="()Ljava/math/BigDecimal;" line="132"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNormPow2" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="139"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="()Ljava/math/BigDecimal;" line="141"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="euclideanNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="148"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="()Ljava/math/BigDecimal;" line="150"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="maxNorm" desc="(Ljava/math/MathContext;)Ljava/math/BigDecimal;" line="158"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigDecimalVector" desc="()Lio/github/ltennstedt/finnmath/linear/vector/BigComplexVector;" line="165"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="570" covered="0"/><counter type="BRANCH" missed="18" covered="0"/><counter type="LINE" missed="33" covered="0"/><counter type="COMPLEXITY" missed="26" covered="0"/><counter type="METHOD" missed="17" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigDecimalVector$Companion" sourcefilename="BigDecimalVector.kt"><method name="builder" desc="(I)Lio/github/ltennstedt/finnmath/linear/builder/BigDecimalVectorJavaBuilder;" line="176"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/LongVector$toDoubleVector$1" sourcefilename="LongVector.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/linear/builder/DoubleVectorBuilder;)V" line="74"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/BigGaussianVector$Companion" sourcefilename="BigGaussianVector.kt"><method name="builder" desc="(I)Lio/github/ltennstedt/finnmath/linear/builder/BigGaussianVectorJavaBuilder;" line="138"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/linear/vector/DoubleVector$toBigDecimalVector$1$1" sourcefilename="DoubleVector.kt"><method name="invoke" desc="(I)Ljava/math/BigDecimal;" line="69"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="BigComplexVector.kt"><line nr="43" mi="1" ci="0" mb="0" cb="0"/><line nr="45" mi="2" ci="0" mb="0" cb="0"/><line nr="46" mi="1" ci="0" mb="0" cb="0"/><line nr="49" mi="3" ci="0" mb="0" cb="0"/><line nr="58" mi="37" ci="0" mb="4" cb="0"/><line nr="59" mi="6" ci="0" mb="0" cb="0"/><line nr="60" mi="33" ci="0" mb="0" cb="0"/><line nr="71" mi="37" ci="0" mb="4" cb="0"/><line nr="72" mi="6" ci="0" mb="0" cb="0"/><line nr="73" mi="33" ci="0" mb="0" cb="0"/><line nr="84" mi="37" ci="0" mb="4" cb="0"/><line nr="85" mi="7" ci="0" mb="0" cb="0"/><line nr="86" mi="27" ci="0" mb="0" cb="0"/><line nr="87" mi="11" ci="0" mb="0" cb="0"/><line nr="88" mi="8" ci="0" mb="0" cb="0"/><line nr="96" mi="5" ci="0" mb="0" cb="0"/><line nr="97" mi="30" ci="0" mb="0" cb="0"/><line nr="98" mi="1" ci="0" mb="0" cb="0"/><line nr="105" mi="5" ci="0" mb="0" cb="0"/><line nr="114" mi="37" ci="0" mb="4" cb="0"/><line nr="115" mi="26" ci="0" mb="0" cb="0"/><line nr="116" mi="8" ci="0" mb="0" cb="0"/><line nr="117" mi="2" ci="0" mb="0" cb="0"/><line nr="120" mi="29" ci="0" mb="0" cb="0"/><line nr="127" mi="14" ci="0" mb="0" cb="0"/><line nr="128" mi="14" ci="0" mb="0" cb="0"/><line nr="130" mi="6" ci="0" mb="0" cb="0"/><line nr="132" mi="49" ci="0" mb="0" cb="0"/><line nr="139" mi="16" ci="0" mb="0" cb="0"/><line nr="140" mi="14" ci="0" mb="0" cb="0"/><line nr="141" mi="3" ci="0" mb="0" cb="0"/><line nr="143" mi="19" ci="0" mb="0" cb="0"/><line nr="151" mi="20" ci="0" mb="0" cb="0"/><line nr="160" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="597" covered="0"/><counter type="BRANCH" missed="16" covered="0"/><counter type="LINE" missed="34" covered="0"/><counter type="COMPLEXITY" missed="24" covered="0"/><counter type="METHOD" missed="16" covered="0"/><counter type="CLASS" missed="2" covered="0"/></sourcefile><sourcefile name="GaussianVector.kt"><line nr="46" mi="1" ci="0" mb="0" cb="0"/><line nr="48" mi="2" ci="0" mb="0" cb="0"/><line nr="49" mi="1" ci="0" mb="0" cb="0"/><line nr="52" mi="3" ci="0" mb="0" cb="0"/><line nr="54" mi="24" ci="0" mb="0" cb="0"/><line nr="56" mi="6" ci="0" mb="0" cb="0"/><line nr="58" mi="39" ci="0" mb="0" cb="0"/><line nr="60" mi="22" ci="0" mb="0" cb="0"/><line nr="67" mi="6" ci="0" mb="0" cb="0"/><line nr="68" mi="15" ci="0" mb="0" cb="0"/><line nr="69" mi="2" ci="0" mb="0" cb="0"/><line nr="76" mi="6" ci="0" mb="0" cb="0"/><line nr="77" mi="15" ci="0" mb="0" cb="0"/><line nr="78" mi="2" ci="0" mb="0" cb="0"/><line nr="85" mi="6" ci="0" mb="0" cb="0"/><line nr="86" mi="15" ci="0" mb="0" cb="0"/><line nr="87" mi="2" ci="0" mb="0" cb="0"/><line nr="96" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="184" covered="0"/><counter type="LINE" missed="18" covered="0"/><counter type="COMPLEXITY" missed="16" covered="0"/><counter type="METHOD" missed="16" covered="0"/><counter type="CLASS" missed="8" covered="0"/></sourcefile><sourcefile name="ComplexVector.kt"><line nr="43" mi="1" ci="0" mb="0" cb="0"/><line nr="45" mi="2" ci="0" mb="0" cb="0"/><line nr="46" mi="1" ci="0" mb="0" cb="0"/><line nr="49" mi="3" ci="0" mb="0" cb="0"/><line nr="51" mi="24" ci="0" mb="0" cb="0"/><line nr="53" mi="6" ci="0" mb="0" cb="0"/><line nr="55" mi="39" ci="0" mb="0" cb="0"/><line nr="57" mi="22" ci="0" mb="0" cb="0"/><line nr="64" mi="6" ci="0" mb="0" cb="0"/><line nr="65" mi="15" ci="0" mb="0" cb="0"/><line nr="66" mi="2" ci="0" mb="0" cb="0"/><line nr="75" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="132" covered="0"/><counter type="LINE" missed="12" covered="0"/><counter type="COMPLEXITY" missed="10" covered="0"/><counter type="METHOD" missed="10" covered="0"/><counter type="CLASS" missed="4" covered="0"/></sourcefile><sourcefile name="VectorEntry.kt"><line nr="35" mi="0" ci="2" mb="0" cb="0"/><line nr="38" mi="0" ci="13" mb="0" cb="0"/><line nr="39" mi="0" ci="1" mb="0" cb="0"/><line nr="40" mi="14" ci="12" mb="2" cb="2"/><line nr="41" mi="0" ci="1" mb="0" cb="0"/><line nr="43" mi="0" ci="5" mb="0" cb="0"/><line nr="52" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="14" covered="53"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="2" covered="5"/><counter type="METHOD" missed="0" covered="5"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigDecimalVector.kt"><line nr="44" mi="1" ci="0" mb="0" cb="0"/><line nr="46" mi="2" ci="0" mb="0" cb="0"/><line nr="47" mi="1" ci="0" mb="0" cb="0"/><line nr="50" mi="3" ci="0" mb="0" cb="0"/><line nr="59" mi="37" ci="0" mb="4" cb="0"/><line nr="60" mi="6" ci="0" mb="0" cb="0"/><line nr="61" mi="33" ci="0" mb="0" cb="0"/><line nr="72" mi="37" ci="0" mb="4" cb="0"/><line nr="73" mi="6" ci="0" mb="0" cb="0"/><line nr="74" mi="33" ci="0" mb="0" cb="0"/><line nr="85" mi="37" ci="0" mb="4" cb="0"/><line nr="86" mi="7" ci="0" mb="0" cb="0"/><line nr="87" mi="27" ci="0" mb="0" cb="0"/><line nr="88" mi="11" ci="0" mb="0" cb="0"/><line nr="89" mi="14" ci="0" mb="0" cb="0"/><line nr="97" mi="5" ci="0" mb="0" cb="0"/><line nr="98" mi="30" ci="0" mb="0" cb="0"/><line nr="99" mi="1" ci="0" mb="0" cb="0"/><line nr="107" mi="12" ci="0" mb="0" cb="0"/><line nr="116" mi="37" ci="0" mb="4" cb="0"/><line nr="117" mi="26" ci="0" mb="0" cb="0"/><line nr="118" mi="8" ci="0" mb="0" cb="0"/><line nr="119" mi="6" ci="0" mb="2" cb="0"/><line nr="122" mi="43" ci="0" mb="0" cb="0"/><line nr="130" mi="29" ci="0" mb="0" cb="0"/><line nr="132" mi="6" ci="0" mb="0" cb="0"/><line nr="139" mi="5" ci="0" mb="0" cb="0"/><line nr="141" mi="7" ci="0" mb="0" cb="0"/><line nr="148" mi="6" ci="0" mb="0" cb="0"/><line nr="150" mi="19" ci="0" mb="0" cb="0"/><line nr="158" mi="20" ci="0" mb="0" cb="0"/><line nr="165" mi="6" ci="0" mb="0" cb="0"/><line nr="166" mi="15" ci="0" mb="0" cb="0"/><line nr="167" mi="2" ci="0" mb="0" cb="0"/><line nr="176" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="594" covered="0"/><counter type="BRANCH" missed="18" covered="0"/><counter type="LINE" missed="35" covered="0"/><counter type="COMPLEXITY" missed="29" covered="0"/><counter type="METHOD" missed="20" covered="0"/><counter type="CLASS" missed="4" covered="0"/></sourcefile><sourcefile name="Comparisons.kt"><line nr="102" mi="0" ci="7" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="LongVector.kt"><line nr="52" mi="0" ci="1" mb="0" cb="0"/><line nr="54" mi="0" ci="2" mb="0" cb="0"/><line nr="55" mi="0" ci="1" mb="0" cb="0"/><line nr="58" mi="3" ci="0" mb="0" cb="0"/><line nr="60" mi="30" ci="0" mb="0" cb="0"/><line nr="62" mi="6" ci="0" mb="0" cb="0"/><line nr="64" mi="11" ci="0" mb="0" cb="0"/><line nr="66" mi="26" ci="0" mb="0" cb="0"/><line nr="73" mi="6" ci="0" mb="0" cb="0"/><line nr="74" mi="15" ci="0" mb="0" cb="0"/><line nr="75" mi="2" ci="0" mb="0" cb="0"/><line nr="83" mi="39" ci="0" mb="0" cb="0"/><line nr="90" mi="6" ci="0" mb="0" cb="0"/><line nr="91" mi="22" ci="0" mb="0" cb="0"/><line nr="92" mi="2" ci="0" mb="0" cb="0"/><line nr="99" mi="7" ci="0" mb="0" cb="0"/><line nr="100" mi="27" ci="0" mb="0" cb="0"/><line nr="101" mi="2" ci="0" mb="0" cb="0"/><line nr="108" mi="6" ci="0" mb="0" cb="0"/><line nr="109" mi="15" ci="0" mb="0" cb="0"/><line nr="110" mi="2" ci="0" mb="0" cb="0"/><line nr="117" mi="6" ci="0" mb="0" cb="0"/><line nr="118" mi="15" ci="0" mb="0" cb="0"/><line nr="119" mi="2" ci="0" mb="0" cb="0"/><line nr="126" mi="6" ci="0" mb="0" cb="0"/><line nr="127" mi="15" ci="0" mb="0" cb="0"/><line nr="128" mi="2" ci="0" mb="0" cb="0"/><line nr="135" mi="6" ci="0" mb="0" cb="0"/><line nr="136" mi="15" ci="0" mb="0" cb="0"/><line nr="137" mi="2" ci="0" mb="0" cb="0"/><line nr="146" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="325" covered="7"/><counter type="LINE" missed="28" covered="3"/><counter type="COMPLEXITY" missed="28" covered="1"/><counter type="METHOD" missed="28" covered="1"/><counter type="CLASS" missed="15" covered="1"/></sourcefile><sourcefile name="AbstractVector.kt"><line nr="41" mi="0" ci="2" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="44" mi="0" ci="6" mb="0" cb="0"/><line nr="51" mi="0" ci="34" mb="0" cb="0"/><line nr="58" mi="24" ci="14" mb="0" cb="0"/><line nr="66" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="0" ci="1" mb="0" cb="0"/><line nr="76" mi="13" ci="18" mb="2" cb="2"/><line nr="77" mi="0" ci="9" mb="0" cb="0"/><line nr="78" mi="10" ci="11" mb="1" cb="1"/><line nr="79" mi="13" ci="0" mb="0" cb="0"/><line nr="81" mi="0" ci="1" mb="0" cb="0"/><line nr="90" mi="37" ci="0" mb="4" cb="0"/><line nr="91" mi="38" ci="0" mb="0" cb="0"/><line nr="101" mi="37" ci="0" mb="4" cb="0"/><line nr="102" mi="6" ci="0" mb="0" cb="0"/><line nr="103" mi="32" ci="0" mb="0" cb="0"/><line nr="114" mi="37" ci="0" mb="4" cb="0"/><line nr="115" mi="33" ci="0" mb="0" cb="0"/><line nr="124" mi="36" ci="0" mb="0" cb="0"/><line nr="131" mi="11" ci="0" mb="0" cb="0"/><line nr="140" mi="37" ci="0" mb="4" cb="0"/><line nr="141" mi="13" ci="0" mb="0" cb="0"/><line nr="179" mi="37" ci="0" mb="4" cb="0"/><line nr="180" mi="5" ci="0" mb="0" cb="0"/><line nr="190" mi="37" ci="0" mb="4" cb="0"/><line nr="191" mi="5" ci="0" mb="0" cb="0"/><line nr="201" mi="37" ci="0" mb="4" cb="0"/><line nr="202" mi="5" ci="0" mb="0" cb="0"/><line nr="212" mi="24" ci="16" mb="3" cb="3"/><line nr="213" mi="0" ci="5" mb="0" cb="0"/><line nr="223" mi="24" ci="16" mb="3" cb="3"/><line nr="224" mi="0" ci="15" mb="0" cb="4"/><line nr="227" mi="4" ci="0" mb="0" cb="0"/><line nr="229" mi="4" ci="0" mb="0" cb="0"/><line nr="231" mi="4" ci="0" mb="0" cb="0"/><line nr="233" mi="4" ci="0" mb="0" cb="0"/><line nr="236" mi="2" ci="0" mb="0" cb="0"/><line nr="238" mi="3" ci="0" mb="0" cb="0"/><line nr="245" mi="5" ci="0" mb="0" cb="0"/><line nr="254" mi="37" ci="0" mb="4" cb="0"/><line nr="255" mi="26" ci="0" mb="2" cb="0"/><line nr="264" mi="8" ci="0" mb="2" cb="0"/><line nr="266" mi="11" ci="0" mb="0" cb="0"/><line nr="269" mi="5" ci="0" mb="2" cb="0"/><line nr="270" mi="5" ci="0" mb="2" cb="0"/><line nr="271" mi="7" ci="0" mb="0" cb="0"/><line nr="274" mi="13" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="734" covered="156"/><counter type="BRANCH" missed="49" covered="13"/><counter type="LINE" missed="33" covered="15"/><counter type="COMPLEXITY" missed="52" covered="10"/><counter type="METHOD" missed="23" covered="8"/><counter type="CLASS" missed="1" covered="2"/></sourcefile><sourcefile name="BigIntegerVector.kt"><line nr="48" mi="1" ci="0" mb="0" cb="0"/><line nr="50" mi="2" ci="0" mb="0" cb="0"/><line nr="51" mi="1" ci="0" mb="0" cb="0"/><line nr="54" mi="3" ci="0" mb="0" cb="0"/><line nr="56" mi="50" ci="0" mb="0" cb="0"/><line nr="64" mi="58" ci="0" mb="0" cb="0"/><line nr="66" mi="6" ci="0" mb="0" cb="0"/><line nr="68" mi="14" ci="0" mb="0" cb="0"/><line nr="76" mi="21" ci="0" mb="0" cb="0"/><line nr="78" mi="32" ci="0" mb="0" cb="0"/><line nr="85" mi="9" ci="0" mb="0" cb="0"/><line nr="86" mi="28" ci="0" mb="0" cb="0"/><line nr="87" mi="3" ci="0" mb="0" cb="0"/><line nr="94" mi="6" ci="0" mb="0" cb="0"/><line nr="95" mi="21" ci="0" mb="0" cb="0"/><line nr="96" mi="2" ci="0" mb="0" cb="0"/><line nr="103" mi="7" ci="0" mb="0" cb="0"/><line nr="104" mi="33" ci="0" mb="0" cb="0"/><line nr="105" mi="2" ci="0" mb="0" cb="0"/><line nr="112" mi="6" ci="0" mb="0" cb="0"/><line nr="113" mi="15" ci="0" mb="0" cb="0"/><line nr="114" mi="2" ci="0" mb="0" cb="0"/><line nr="121" mi="6" ci="0" mb="0" cb="0"/><line nr="122" mi="15" ci="0" mb="0" cb="0"/><line nr="123" mi="2" ci="0" mb="0" cb="0"/><line nr="130" mi="7" ci="0" mb="0" cb="0"/><line nr="131" mi="19" ci="0" mb="0" cb="0"/><line nr="132" mi="2" ci="0" mb="0" cb="0"/><line nr="141" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="411" covered="0"/><counter type="LINE" missed="29" covered="0"/><counter type="COMPLEXITY" missed="25" covered="0"/><counter type="METHOD" missed="25" covered="0"/><counter type="CLASS" missed="12" covered="0"/></sourcefile><sourcefile name="DoubleVector.kt"><line nr="47" mi="1" ci="0" mb="0" cb="0"/><line nr="49" mi="2" ci="0" mb="0" cb="0"/><line nr="50" mi="1" ci="0" mb="0" cb="0"/><line nr="53" mi="3" ci="0" mb="0" cb="0"/><line nr="55" mi="29" ci="0" mb="0" cb="0"/><line nr="57" mi="6" ci="0" mb="0" cb="0"/><line nr="59" mi="10" ci="0" mb="0" cb="0"/><line nr="61" mi="26" ci="0" mb="0" cb="0"/><line nr="68" mi="6" ci="0" mb="0" cb="0"/><line nr="69" mi="22" ci="0" mb="0" cb="0"/><line nr="70" mi="2" ci="0" mb="0" cb="0"/><line nr="77" mi="7" ci="0" mb="0" cb="0"/><line nr="78" mi="28" ci="0" mb="0" cb="0"/><line nr="79" mi="2" ci="0" mb="0" cb="0"/><line nr="86" mi="6" ci="0" mb="0" cb="0"/><line nr="87" mi="15" ci="0" mb="0" cb="0"/><line nr="88" mi="2" ci="0" mb="0" cb="0"/><line nr="95" mi="6" ci="0" mb="0" cb="0"/><line nr="96" mi="15" ci="0" mb="0" cb="0"/><line nr="97" mi="2" ci="0" mb="0" cb="0"/><line nr="106" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="214" covered="0"/><counter type="LINE" missed="21" covered="0"/><counter type="COMPLEXITY" missed="19" covered="0"/><counter type="METHOD" missed="19" covered="0"/><counter type="CLASS" missed="10" covered="0"/></sourcefile><sourcefile name="BigGaussianVector.kt"><line nr="46" mi="1" ci="0" mb="0" cb="0"/><line nr="48" mi="2" ci="0" mb="0" cb="0"/><line nr="49" mi="1" ci="0" mb="0" cb="0"/><line nr="52" mi="3" ci="0" mb="0" cb="0"/><line nr="54" mi="21" ci="0" mb="0" cb="0"/><line nr="61" mi="14" ci="0" mb="0" cb="0"/><line nr="62" mi="14" ci="0" mb="0" cb="0"/><line nr="69" mi="14" ci="0" mb="0" cb="0"/><line nr="70" mi="15" ci="0" mb="0" cb="0"/><line nr="72" mi="6" ci="0" mb="0" cb="0"/><line nr="75" mi="49" ci="0" mb="0" cb="0"/><line nr="82" mi="16" ci="0" mb="0" cb="0"/><line nr="83" mi="14" ci="0" mb="0" cb="0"/><line nr="84" mi="3" ci="0" mb="0" cb="0"/><line nr="91" mi="16" ci="0" mb="0" cb="0"/><line nr="92" mi="15" ci="0" mb="0" cb="0"/><line nr="93" mi="4" ci="0" mb="0" cb="0"/><line nr="95" mi="19" ci="0" mb="0" cb="0"/><line nr="103" mi="20" ci="0" mb="0" cb="0"/><line nr="111" mi="20" ci="0" mb="0" cb="0"/><line nr="118" mi="6" ci="0" mb="0" cb="0"/><line nr="119" mi="15" ci="0" mb="0" cb="0"/><line nr="120" mi="2" ci="0" mb="0" cb="0"/><line nr="127" mi="7" ci="0" mb="0" cb="0"/><line nr="128" mi="19" ci="0" mb="0" cb="0"/><line nr="129" mi="2" ci="0" mb="0" cb="0"/><line nr="138" mi="5" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="353" covered="0"/><counter type="LINE" missed="27" covered="0"/><counter type="COMPLEXITY" missed="19" covered="0"/><counter type="METHOD" missed="19" covered="0"/><counter type="CLASS" missed="6" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="3558" covered="223"/><counter type="BRANCH" missed="85" covered="15"/><counter type="LINE" missed="237" covered="26"/><counter type="COMPLEXITY" missed="224" covered="17"/><counter type="METHOD" missed="176" covered="15"/><counter type="CLASS" missed="62" covered="5"/></package><package name="io/github/ltennstedt/finnmath/number/fraction"><class name="io/github/ltennstedt/finnmath/number/fraction/AbstractFraction" sourcefilename="AbstractFraction.kt"><method name="&lt;init&gt;" desc="(Ljava/lang/Number;Ljava/lang/Number;)V" line="39"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getNumerator" desc="()Ljava/lang/Number;" line="40"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getDenominator" desc="()Ljava/lang/Number;" line="41"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNotInvertible" desc="()Z" line="56"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNotUnit" desc="()Z" line="71"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNotDyadic" desc="()Z" line="86"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isReducible" desc="()Z" line="101"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isImproper" desc="()Z" line="116"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThanOrEqualTo" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Z" line="197"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThan" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Z" line="204"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="greaterThan" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Z" line="211"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="219"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="227"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equivalent" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Z" line="269"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toByte" desc="()B" line="271"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toShort" desc="()S" line="273"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toInt" desc="()I" line="275"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toLong" desc="()J" line="277"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toFloat" desc="()F" line="279"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toDouble" desc="()D" line="281"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toChar" desc="()C" line="283"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="plus" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="292"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="minus" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="294"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="times" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="296"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="div" desc="(Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;)Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="298"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unaryPlus" desc="()Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="301"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="unaryMinus" desc="()Lio/github/ltennstedt/finnmath/number/fraction/AbstractFraction;" line="303"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="operator1" desc="()Ljava/lang/Number;" line="305"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="operator2" desc="()Ljava/lang/Number;" line="307"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hashCode" desc="()I" line="309"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="equals" desc="(Ljava/lang/Object;)Z" line="312"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toString" desc="()Ljava/lang/String;" line="318"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="30" covered="224"/><counter type="BRANCH" missed="0" covered="30"/><counter type="LINE" missed="6" covered="29"/><counter type="COMPLEXITY" missed="6" covered="41"/><counter type="METHOD" missed="6" covered="26"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/Fraction$Companion" sourcefilename="Fraction.kt"/><class name="io/github/ltennstedt/finnmath/number/fraction/Fraction$isDyadic$2" sourcefilename="Fraction.kt"><method name="invoke" desc="()Z" line="64"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/Fraction" sourcefilename="Fraction.kt"><method name="&lt;init&gt;" desc="(JJ)V" line="47"><counter type="INSTRUCTION" missed="13" covered="49"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(JJILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="47"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isInvertible" desc="()Z" line="59"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isUnit" desc="()Z" line="62"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDyadic" desc="()Z" line="64"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isIrreducible" desc="()Z" line="66"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isProper" desc="()Z" line="68"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getSignum" desc="()I" line="71"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(II)V" line="82"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="82"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="88"><counter type="INSTRUCTION" missed="33" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="94"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="multiply" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="100"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="103"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="107"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="113"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="116"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="120"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lessThanOrEqualTo" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)Z" line="123"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inc" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="130"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dec" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="132"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="normalize" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="134"><counter type="INSTRUCTION" missed="23" covered="15"/><counter type="BRANCH" missed="4" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="3" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="reduce" desc="()Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="142"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="expand" desc="(J)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="146"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rangeTo" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)Lio/github/ltennstedt/finnmath/number/range/FractionRange;" line="153"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="compareTo" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)I" line="155"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="toBigDecimal" desc="()Ljava/math/BigDecimal;" line="157"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="COMPARATOR$lambda-3" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)I" line="191"><counter type="INSTRUCTION" missed="1" covered="22"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="1" covered="3"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;clinit&gt;" desc="()V" line="68"><counter type="INSTRUCTION" missed="0" covered="29"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="233" covered="330"/><counter type="BRANCH" missed="15" covered="15"/><counter type="LINE" missed="23" covered="41"/><counter type="COMPLEXITY" missed="22" covered="22"/><counter type="METHOD" missed="12" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/AbstractFraction$Companion" sourcefilename="AbstractFraction.kt"/><class name="io/github/ltennstedt/finnmath/number/fraction/BigFraction$Companion" sourcefilename="BigFraction.kt"/><class name="io/github/ltennstedt/finnmath/number/fraction/BigFraction$isIrreducible$2" sourcefilename="BigFraction.kt"><method name="invoke" desc="()Z" line="63"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/BigFraction$isProper$2" sourcefilename="BigFraction.kt"><method name="invoke" desc="()Z" line="65"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/Fraction$isProper$2" sourcefilename="Fraction.kt"><method name="invoke" desc="()Z" line="68"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/BigFraction" sourcefilename="BigFraction.kt"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="65"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isInvertible" desc="()Z" line="56"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isUnit" desc="()Z" line="59"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDyadic" desc="()Z" line="61"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isIrreducible" desc="()Z" line="63"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isProper" desc="()Z" line="65"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getSignum" desc="()I" line="68"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(II)V" line="79"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="79"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJ)V" line="93"><counter type="INSTRUCTION" missed="21" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(JJILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="93"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="add" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="99"><counter type="INSTRUCTION" missed="69" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="subtract" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="105"><counter type="INSTRUCTION" missed="69" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="multiply" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="111"><counter type="INSTRUCTION" missed="39" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="divide" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="114"><counter type="INSTRUCTION" missed="28" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="pow" desc="(I)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="118"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="negate" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="124"><counter type="INSTRUCTION" missed="18" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="invert" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="127"><counter type="INSTRUCTION" missed="30" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="abs" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="131"><counter type="INSTRUCTION" missed="22" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lessThanOrEqualTo" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)Z" line="134"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="inc" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="141"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="dec" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="143"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="normalize" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="145"><counter type="INSTRUCTION" missed="46" covered="0"/><counter type="BRANCH" missed="8" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="5" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="reduce" desc="()Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="153"><counter type="INSTRUCTION" missed="43" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="expand" desc="(Ljava/math/BigInteger;)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="157"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="rangeTo" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)Lio/github/ltennstedt/finnmath/number/range/BigFractionRange;" line="164"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="compareTo" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)I" line="166"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="toBigDecimal" desc="()Ljava/math/BigDecimal;" line="168"><counter type="INSTRUCTION" missed="27" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="COMPARATOR$lambda-3" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)I" line="203"><counter type="INSTRUCTION" missed="23" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;clinit&gt;" desc="()V" line="65"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="644" covered="143"/><counter type="BRANCH" missed="22" covered="6"/><counter type="LINE" missed="50" covered="18"/><counter type="COMPLEXITY" missed="36" covered="9"/><counter type="METHOD" missed="25" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/Fraction$Companion$UNITS$1" sourcefilename="Fraction.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/number/fraction/Fraction;)Lio/github/ltennstedt/finnmath/number/fraction/Fraction;" line="182"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/Fraction$isIrreducible$2" sourcefilename="Fraction.kt"><method name="invoke" desc="()Z" line="66"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/BigFraction$isDyadic$2" sourcefilename="BigFraction.kt"><method name="invoke" desc="()Z" line="61"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/><counter type="CLASS" missed="0" covered="1"/></class><class name="io/github/ltennstedt/finnmath/number/fraction/BigFraction$Companion$UNITS$1" sourcefilename="BigFraction.kt"><method name="invoke" desc="(Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;)Lio/github/ltennstedt/finnmath/number/fraction/BigFraction;" line="194"><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="25" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="Fraction.kt"><line nr="47" mi="0" ci="8" mb="0" cb="0"/><line nr="49" mi="0" ci="2" mb="0" cb="0"/><line nr="50" mi="0" ci="2" mb="0" cb="0"/><line nr="51" mi="0" ci="3" mb="0" cb="0"/><line nr="52" mi="0" ci="3" mb="0" cb="0"/><line nr="54" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="13" ci="13" mb="2" cb="2"/><line nr="56" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="0" ci="10" mb="0" cb="2"/><line nr="62" mi="0" ci="10" mb="0" cb="2"/><line nr="64" mi="0" ci="22" mb="0" cb="0"/><line nr="66" mi="0" ci="31" mb="0" cb="2"/><line nr="68" mi="0" ci="30" mb="0" cb="0"/><line nr="71" mi="0" ci="10" mb="0" cb="0"/><line nr="82" mi="11" ci="0" mb="0" cb="0"/><line nr="83" mi="2" ci="0" mb="0" cb="0"/><line nr="84" mi="2" ci="0" mb="0" cb="0"/><line nr="85" mi="2" ci="0" mb="0" cb="0"/><line nr="88" mi="16" ci="0" mb="0" cb="0"/><line nr="89" mi="8" ci="0" mb="0" cb="0"/><line nr="90" mi="6" ci="0" mb="0" cb="0"/><line nr="94" mi="0" ci="16" mb="0" cb="0"/><line nr="95" mi="0" ci="8" mb="0" cb="0"/><line nr="96" mi="0" ci="6" mb="0" cb="0"/><line nr="100" mi="18" ci="0" mb="0" cb="0"/><line nr="103" mi="20" ci="0" mb="2" cb="0"/><line nr="104" mi="5" ci="0" mb="0" cb="0"/><line nr="107" mi="1" ci="0" mb="0" cb="0"/><line nr="108" mi="10" ci="0" mb="2" cb="0"/><line nr="109" mi="12" ci="0" mb="2" cb="0"/><line nr="110" mi="1" ci="0" mb="0" cb="0"/><line nr="111" mi="1" ci="0" mb="0" cb="0"/><line nr="113" mi="11" ci="0" mb="0" cb="0"/><line nr="116" mi="20" ci="0" mb="2" cb="0"/><line nr="117" mi="10" ci="0" mb="0" cb="0"/><line nr="120" mi="0" ci="20" mb="0" cb="0"/><line nr="123" mi="0" ci="3" mb="0" cb="0"/><line nr="124" mi="0" ci="3" mb="0" cb="0"/><line nr="125" mi="0" ci="8" mb="0" cb="0"/><line nr="126" mi="0" ci="8" mb="0" cb="0"/><line nr="127" mi="0" ci="8" mb="0" cb="2"/><line nr="130" mi="4" ci="0" mb="0" cb="0"/><line nr="132" mi="4" ci="0" mb="0" cb="0"/><line nr="134" mi="0" ci="1" mb="0" cb="0"/><line nr="135" mi="21" ci="3" mb="3" cb="1"/><line nr="136" mi="2" ci="3" mb="1" cb="1"/><line nr="137" mi="0" ci="5" mb="0" cb="2"/><line nr="138" mi="0" ci="2" mb="0" cb="0"/><line nr="139" mi="0" ci="1" mb="0" cb="0"/><line nr="142" mi="0" ci="8" mb="0" cb="0"/><line nr="143" mi="0" ci="14" mb="0" cb="0"/><line nr="146" mi="14" ci="0" mb="0" cb="0"/><line nr="153" mi="6" ci="0" mb="0" cb="0"/><line nr="155" mi="0" ci="5" mb="0" cb="0"/><line nr="157" mi="0" ci="29" mb="0" cb="0"/><line nr="166" mi="0" ci="8" mb="0" cb="0"/><line nr="174" mi="0" ci="8" mb="0" cb="0"/><line nr="182" mi="10" ci="5" mb="0" cb="0"/><line nr="190" mi="0" ci="3" mb="0" cb="0"/><line nr="191" mi="0" ci="2" mb="0" cb="0"/><line nr="192" mi="0" ci="7" mb="0" cb="2"/><line nr="193" mi="0" ci="7" mb="1" cb="1"/><line nr="194" mi="1" ci="0" mb="0" cb="0"/><line nr="198" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="246" covered="353"/><counter type="BRANCH" missed="15" covered="17"/><counter type="LINE" missed="23" covered="41"/><counter type="COMPLEXITY" missed="23" covered="26"/><counter type="METHOD" missed="13" covered="20"/><counter type="CLASS" missed="1" covered="4"/></sourcefile><sourcefile name="AbstractFraction.kt"><line nr="39" mi="0" ci="1" mb="0" cb="0"/><line nr="40" mi="0" ci="6" mb="0" cb="0"/><line nr="41" mi="0" ci="6" mb="0" cb="0"/><line nr="42" mi="0" ci="2" mb="0" cb="0"/><line nr="56" mi="0" ci="7" mb="0" cb="2"/><line nr="71" mi="0" ci="7" mb="0" cb="2"/><line nr="86" mi="0" ci="7" mb="0" cb="2"/><line nr="101" mi="0" ci="7" mb="0" cb="2"/><line nr="116" mi="0" ci="7" mb="0" cb="2"/><line nr="197" mi="0" ci="12" mb="0" cb="4"/><line nr="204" mi="0" ci="8" mb="0" cb="2"/><line nr="211" mi="0" ci="8" mb="0" cb="2"/><line nr="219" mi="0" ci="8" mb="0" cb="2"/><line nr="227" mi="0" ci="8" mb="0" cb="2"/><line nr="269" mi="0" ci="8" mb="0" cb="0"/><line nr="271" mi="0" ci="4" mb="0" cb="0"/><line nr="273" mi="0" ci="4" mb="0" cb="0"/><line nr="275" mi="0" ci="4" mb="0" cb="0"/><line nr="277" mi="0" ci="4" mb="0" cb="0"/><line nr="279" mi="0" ci="4" mb="0" cb="0"/><line nr="281" mi="0" ci="4" mb="0" cb="0"/><line nr="283" mi="4" ci="0" mb="0" cb="0"/><line nr="292" mi="4" ci="0" mb="0" cb="0"/><line nr="294" mi="0" ci="4" mb="0" cb="0"/><line nr="296" mi="4" ci="0" mb="0" cb="0"/><line nr="298" mi="4" ci="0" mb="0" cb="0"/><line nr="301" mi="2" ci="0" mb="0" cb="0"/><line nr="303" mi="3" ci="0" mb="0" cb="0"/><line nr="305" mi="0" ci="3" mb="0" cb="0"/><line nr="307" mi="0" ci="3" mb="0" cb="0"/><line nr="309" mi="0" ci="16" mb="0" cb="0"/><line nr="312" mi="0" ci="5" mb="0" cb="2"/><line nr="313" mi="0" ci="5" mb="0" cb="2"/><line nr="314" mi="0" ci="18" mb="0" cb="4"/><line nr="318" mi="0" ci="17" mb="0" cb="0"/><counter type="INSTRUCTION" missed="30" covered="224"/><counter type="BRANCH" missed="0" covered="30"/><counter type="LINE" missed="6" covered="29"/><counter type="COMPLEXITY" missed="6" covered="41"/><counter type="METHOD" missed="6" covered="26"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="BigFraction.kt"><line nr="44" mi="0" ci="8" mb="0" cb="0"/><line nr="46" mi="0" ci="7" mb="0" cb="0"/><line nr="47" mi="0" ci="2" mb="0" cb="0"/><line nr="48" mi="0" ci="2" mb="0" cb="0"/><line nr="49" mi="0" ci="2" mb="0" cb="0"/><line nr="51" mi="0" ci="1" mb="0" cb="0"/><line nr="52" mi="0" ci="25" mb="0" cb="4"/><line nr="53" mi="0" ci="1" mb="0" cb="0"/><line nr="56" mi="0" ci="9" mb="0" cb="2"/><line nr="59" mi="0" ci="5" mb="0" cb="0"/><line nr="61" mi="0" ci="22" mb="0" cb="0"/><line nr="63" mi="18" ci="9" mb="0" cb="0"/><line nr="65" mi="17" ci="13" mb="0" cb="0"/><line nr="68" mi="10" ci="0" mb="0" cb="0"/><line nr="79" mi="11" ci="0" mb="0" cb="0"/><line nr="80" mi="10" ci="0" mb="0" cb="0"/><line nr="81" mi="10" ci="0" mb="0" cb="0"/><line nr="82" mi="2" ci="0" mb="0" cb="0"/><line nr="93" mi="11" ci="0" mb="0" cb="0"/><line nr="94" mi="9" ci="0" mb="0" cb="0"/><line nr="95" mi="9" ci="0" mb="0" cb="0"/><line nr="96" mi="2" ci="0" mb="0" cb="0"/><line nr="99" mi="43" ci="0" mb="0" cb="0"/><line nr="100" mi="17" ci="0" mb="0" cb="0"/><line nr="101" mi="6" ci="0" mb="0" cb="0"/><line nr="105" mi="43" ci="0" mb="0" cb="0"/><line nr="106" mi="17" ci="0" mb="0" cb="0"/><line nr="107" mi="6" ci="0" mb="0" cb="0"/><line nr="111" mi="36" ci="0" mb="0" cb="0"/><line nr="114" mi="20" ci="0" mb="2" cb="0"/><line nr="115" mi="5" ci="0" mb="0" cb="0"/><line nr="118" mi="1" ci="0" mb="0" cb="0"/><line nr="119" mi="10" ci="0" mb="2" cb="0"/><line nr="120" mi="12" ci="0" mb="2" cb="0"/><line nr="121" mi="1" ci="0" mb="0" cb="0"/><line nr="122" mi="1" ci="0" mb="0" cb="0"/><line nr="124" mi="18" ci="0" mb="0" cb="0"/><line nr="127" mi="20" ci="0" mb="2" cb="0"/><line nr="128" mi="10" ci="0" mb="0" cb="0"/><line nr="131" mi="22" ci="0" mb="0" cb="0"/><line nr="134" mi="3" ci="0" mb="0" cb="0"/><line nr="135" mi="3" ci="0" mb="0" cb="0"/><line nr="136" mi="17" ci="0" mb="0" cb="0"/><line nr="137" mi="17" ci="0" mb="0" cb="0"/><line nr="138" mi="8" ci="0" mb="2" cb="0"/><line nr="141" mi="4" ci="0" mb="0" cb="0"/><line nr="143" mi="4" ci="0" mb="0" cb="0"/><line nr="145" mi="1" ci="0" mb="0" cb="0"/><line nr="146" mi="32" ci="0" mb="4" cb="0"/><line nr="147" mi="5" ci="0" mb="2" cb="0"/><line nr="148" mi="5" ci="0" mb="2" cb="0"/><line nr="149" mi="2" ci="0" mb="0" cb="0"/><line nr="150" mi="1" ci="0" mb="0" cb="0"/><line nr="153" mi="8" ci="0" mb="0" cb="0"/><line nr="154" mi="35" ci="0" mb="0" cb="0"/><line nr="157" mi="32" ci="0" mb="0" cb="0"/><line nr="164" mi="6" ci="0" mb="0" cb="0"/><line nr="166" mi="5" ci="0" mb="0" cb="0"/><line nr="168" mi="27" ci="0" mb="0" cb="0"/><line nr="177" mi="0" ci="13" mb="0" cb="0"/><line nr="185" mi="0" ci="13" mb="0" cb="0"/><line nr="194" mi="22" ci="5" mb="0" cb="0"/><line nr="202" mi="0" ci="3" mb="0" cb="0"/><line nr="203" mi="2" ci="0" mb="0" cb="0"/><line nr="204" mi="7" ci="0" mb="2" cb="0"/><line nr="205" mi="7" ci="0" mb="2" cb="0"/><line nr="206" mi="1" ci="0" mb="0" cb="0"/><line nr="210" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="684" covered="147"/><counter type="BRANCH" missed="22" covered="6"/><counter type="LINE" missed="50" covered="18"/><counter type="COMPLEXITY" missed="39" covered="10"/><counter type="METHOD" missed="28" covered="7"/><counter type="CLASS" missed="3" covered="2"/></sourcefile><counter type="INSTRUCTION" missed="960" covered="724"/><counter type="BRANCH" missed="37" covered="53"/><counter type="LINE" missed="79" covered="88"/><counter type="COMPLEXITY" missed="68" covered="77"/><counter type="METHOD" missed="47" covered="53"/><counter type="CLASS" missed="4" covered="7"/></package><package name="io/github/ltennstedt/finnmath"><class name="io/github/ltennstedt/finnmath/FinnmathContext" sourcefilename="FinnmathContext.kt"><method name="&lt;init&gt;" desc="(ILjava/math/MathContext;)V" line="33"><counter type="INSTRUCTION" missed="12" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="(ILjava/math/MathContext;ILkotlin/jvm/internal/DefaultConstructorMarker;)V" line="36"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getScale" desc="()I" line="37"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="getMathContext" desc="()Ljava/math/MathContext;" line="38"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="io/github/ltennstedt/finnmath/FinnmathContext$Companion" sourcefilename="FinnmathContext.kt"/><sourcefile name="FinnmathContext.kt"><line nr="33" mi="2" ci="0" mb="0" cb="0"/><line nr="36" mi="11" ci="0" mb="0" cb="0"/><line nr="37" mi="8" ci="0" mb="0" cb="0"/><line nr="38" mi="13" ci="0" mb="0" cb="0"/><line nr="43" mi="1" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="5" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></package><counter type="INSTRUCTION" missed="11957" covered="1345"/><counter type="BRANCH" missed="408" covered="92"/><counter type="LINE" missed="975" covered="165"/><counter type="COMPLEXITY" missed="876" covered="136"/><counter type="METHOD" missed="660" covered="102"/><counter type="CLASS" missed="151" covered="27"/></report>